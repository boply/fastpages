{
  
    
        "post0": {
            "title": "Lesson 3 Hacks",
            "content": "Merge Sort Hack #1 . void merge(String arr[], int l, int m, int r) { // Find the sizes of two subarrays to be merged int n1 = m - l + 1; int n2 = r - m; /* Create temp arrays */ String[] L = new String[n1]; String[] R = new String[n2]; /* Copy data to temp arrays */ for (int i = 0; i &lt; n1; ++i) L[i] = arr[l + i]; for (int j = 0; j &lt; n2; ++j) R[j] = arr[m + 1 + j]; /* Merge the temp arrays */ // Initial indexes of first and second subarrays int i = 0, j = 0; // Initial index of merged subarray array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (L[i].compareTo(R[j]) &lt;= 0) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } /* Copy remaining elements of L[] if any */ while (i &lt; n1) { arr[k] = L[i]; i++; k++; } /* Copy remaining elements of R[] if any */ while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } . Merge Sort Hack #2 . public class MergeSort { public static void mergeSort(int[] arr, int left, int right) { if (left &lt; right) { int mid = (left + right) / 2; mergeSort(arr, left, mid); mergeSort(arr, mid + 1, right); merge(arr, left, mid, right); } } public static void merge(int[] arr, int left, int mid, int right) { int n1 = mid - left + 1; int n2 = right - mid; int[] leftArr = new int[n1]; int[] rightArr = new int[n2]; for (int i = 0; i &lt; n1; i++) { leftArr[i] = arr[left + i]; } for (int j = 0; j &lt; n2; j++) { rightArr[j] = arr[mid + 1 + j]; } int i = 0, j = 0, k = left; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (leftArr[i] &lt;= rightArr[j]) { arr[k] = leftArr[i]; i++; } else { arr[k] = rightArr[j]; j++; } k++; } while (i &lt; n1) { arr[k] = leftArr[i]; i++; k++; } while (j &lt; n2) { arr[k] = rightArr[j]; j++; k++; } } public static void main(String[] args) { int[] arr = {10, 7, 8, 9, 1, 5}; System.out.println(&quot;Before:&quot; + Arrays.toString(arr)); mergeSort(arr, 0, arr.length - 1); System.out.println(&quot;After:&quot; + Arrays.toString(arr)); } } MergeSort.main(null); . Before:[10, 7, 8, 9, 1, 5] After:[1, 5, 7, 8, 9, 10] . Binary Search Hack #1 . public class BinarySearchRecursive { public static int binarySearch(int[] arr, int x, int low, int high) { if (low &gt; high) { return -1; // Element not found } int mid = low + (high - low) / 2; if (arr[mid] == x) { return mid; // Element found at mid index } else if (arr[mid] &gt; x) { return binarySearch(arr, x, low, mid - 1); // Search in left half } else { return binarySearch(arr, x, mid + 1, high); // Search in right half } } public static void main(String[] args) { int[] arr = {1, 3, 5, 7, 9, 23, 45, 67}; int x = 45; int index = binarySearch(arr, x, 0, arr.length - 1); if (index == -1) { System.out.println(&quot;Element not found in array&quot;); } else { System.out.println(&quot;Element found at index: &quot; + index); } } } BinarySearchRecursive.main(null); . Element found at index: 6 . Binary Search Hack #2 . public class MergeSortAndBinarySearch { public static void main(String[] args) { int[] array = {5, 6, 3, 1, 8, 9, 4, 7, 2}; int searchElement = 7; // Sort the array using merge sort mergeSort(array, 0, array.length - 1); // Perform binary search on sorted array to find index of searchElement int index = binarySearch(array, searchElement, 0, array.length - 1); if (index == -1) { System.out.println(&quot;Element not found in array&quot;); } else { System.out.println(&quot;Element found at index: &quot; + index); } } public static void mergeSort(int[] arr, int left, int right) { if (left &lt; right) { int mid = left + (right - left) / 2; mergeSort(arr, left, mid); mergeSort(arr, mid + 1, right); merge(arr, left, mid, right); } } public static void merge(int[] arr, int left, int mid, int right) { int n1 = mid - left + 1; int n2 = right - mid; int[] leftArr = new int[n1]; int[] rightArr = new int[n2]; for (int i = 0; i &lt; n1; i++) { leftArr[i] = arr[left + i]; } for (int j = 0; j &lt; n2; j++) { rightArr[j] = arr[mid + 1 + j]; } int i = 0, j = 0, k = left; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (leftArr[i] &lt;= rightArr[j]) { arr[k++] = leftArr[i++]; } else { arr[k++] = rightArr[j++]; } } while (i &lt; n1) { arr[k++] = leftArr[i++]; } while (j &lt; n2) { arr[k++] = rightArr[j++]; } } public static int binarySearch(int[] arr, int x, int low, int high) { if (low &gt; high) { return -1; // Element not found } int mid = low + (high - low) / 2; if (arr[mid] == x) { return mid; // Element found at mid index } else if (arr[mid] &gt; x) { return binarySearch(arr, x, low, mid - 1); // Search in left half } else { return binarySearch(arr, x, mid + 1, high); // Search in right half } } } MergeSortAndBinarySearch.main(null); . Element found at index: 6 .",
            "url": "https://boply.github.io/fastpages/jupyter/java/2023/04/24/Lesson-3.html",
            "relUrl": "/jupyter/java/2023/04/24/Lesson-3.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson 1 Hacks",
            "content": "Recursion Hack . public static void printPattern(int n) { // Base case: If n is 1 or less, print a single asterisk and return if (n &lt;= 1) { System.out.println(&quot;*&quot;); return; } // Recursive case: Print n asterisks and call printPattern() with n-1 for (int i = 0; i &lt; n; i++) { System.out.print(&quot;*&quot;); } System.out.println(); printPattern(n - 1); } printPattern(10); . ********** ********* ******** ******* ****** ***** **** *** ** * . Sorting Hack (Heap Sort) . public class Country { private String name; private int size; public Country(String name, int size) { this.name = name; this.size = size; } public String getName() { return name; } public int getSize() { return size; } @Override public String toString() { return name + &quot; (&quot; + size + &quot;)&quot;; } } . import java.util.Comparator; public class CountryComparator implements Comparator&lt;Country&gt; { @Override public int compare(Country c1, Country c2) { return c2.getSize() - c1.getSize(); } } . import java.util.ArrayList; public class HeapSort { public static void heapSort(ArrayList&lt;Country&gt; list, Comparator&lt;Country&gt; comparator) { int n = list.size(); // Build heap (rearrange array) for (int i = n / 2 - 1; i &gt;= 0; i--) heapify(list, n, i, comparator); // One by one extract an element from heap for (int i = n - 1; i &gt;= 0; i--) { // Move current root to end Country temp = list.get(0); list.set(0, list.get(i)); list.set(i, temp); // call max heapify on the reduced heap heapify(list, i, 0, comparator); } } private static void heapify(ArrayList&lt;Country&gt; list, int n, int i, Comparator&lt;Country&gt; comparator) { int largest = i; // Initialize largest as root int left = 2 * i + 1; // left = 2*i + 1 int right = 2 * i + 2; // right = 2*i + 2 // If left child is larger than root if (left &lt; n &amp;&amp; comparator.compare(list.get(left), list.get(largest)) &gt; 0) largest = left; // If right child is larger than largest so far if (right &lt; n &amp;&amp; comparator.compare(list.get(right), list.get(largest)) &gt; 0) largest = right; // If largest is not root if (largest != i) { Country swap = list.get(i); list.set(i, list.get(largest)); list.set(largest, swap); // Recursively heapify the affected sub-tree heapify(list, n, largest, comparator); } } } . import java.util.Random; public class HeapSortTester { public static void main(String[] args) { // Generate some sample data ArrayList&lt;Country&gt; countries = generateSampleData(10); System.out.println(&quot;Before sorting:&quot;); printCountries(countries); // Sort the list using Heap Sort with CountryComparator Comparator&lt;Country&gt; comparator = new CountryComparator(); HeapSort.heapSort(countries, comparator); System.out.println(&quot;After sorting:&quot;); printCountries(countries); } private static ArrayList&lt;Country&gt; generateSampleData(int n) { ArrayList&lt;Country&gt; countries = new ArrayList&lt;&gt;(); Random random = new Random(); String[] names = {&quot;USA&quot;, &quot;China&quot;, &quot;Russia&quot;, &quot;Australia&quot;, &quot;Brazil&quot;, &quot;Canada&quot;, &quot;India&quot;, &quot;Japan&quot;, &quot;Mexico&quot;, &quot;Germany&quot;}; for (int i = 0; i &lt; n; i++) { int size = random.nextInt(1000) + 1; int index = random.nextInt(names.length); Country country = new Country(names[index], size); countries.add(country); } return countries; } private static void printCountries(ArrayList&lt;Country&gt; countries) { for (Country country : countries) { System.out.println(country); } System.out.println(); } } HeapSortTester.main(null); . Before sorting: Russia (969) Brazil (647) Russia (507) USA (944) Canada (748) Russia (102) Australia (169) Brazil (883) Russia (182) China (482) After sorting: Russia (969) USA (944) Brazil (883) Canada (748) Brazil (647) Russia (507) China (482) Russia (182) Australia (169) Russia (102) . Arraylist Hack . import java.util.ArrayList; import java.util.Collections; public class ArrayListDemo { public static void main(String[] args) { ArrayList&lt;Integer&gt; originalList = new ArrayList&lt;&gt;(); Collections.addAll(originalList, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10); System.out.println(&quot;Original list: &quot; + originalList); ArrayList&lt;Integer&gt; modifiedList = new ArrayList&lt;&gt;(originalList); for (int i = modifiedList.size() - 1; i &gt;= 0; i--) { if (i % 2 == 0) { modifiedList.remove(i); } } System.out.println(&quot;Modified list: &quot; + modifiedList); ArrayList&lt;Integer&gt; reversedList = new ArrayList&lt;&gt;(modifiedList); Collections.reverse(reversedList); System.out.println(&quot;Reversed list: &quot; + reversedList); boolean sameElements = originalList.equals(reversedList); System.out.println(&quot;Do the original list and the reversed modified list contain the same elements? &quot; + sameElements); } } ArrayListDemo.main(null); . Original list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Modified list: [2, 4, 6, 8, 10] Reversed list: [10, 8, 6, 4, 2] Do the original list and the reversed modified list contain the same elements? false .",
            "url": "https://boply.github.io/fastpages/jupyter/java/2023/04/23/Lesson-1.html",
            "relUrl": "/jupyter/java/2023/04/23/Lesson-1.html",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Test",
            "content": "public class Book { private String title; private int id; private long creationTime; private long bookLife; private static int bookCount = 0; public Book(String title, long bookLife) { this.title = title; this.bookLife = bookLife; this.creationTime = System.nanoTime() / (long)1000000000; bookCount++; this.id = bookCount; } public String getTitle() { return title; } public int getId() { return id; } public long getBookLife() { return bookLife; } public static int getBookCount() { return bookCount; } public static int setBookCount() { return bookCount = 0; } public boolean isExpired() { long currentTime = System.nanoTime() / (long)1000000000; if (currentTime &gt; creationTime + bookLife) { return true; } else { return false; } } @Override public String toString() { return this.title + &quot;, &quot; + this.id + &quot;, &quot; + this.bookLife + &quot; days, &quot; + this.isExpired(); } } . public class Novel extends Book { private String author; private int stamps; public Novel(String title, int bookLife, String author, int stamps) { super(title, bookLife); this.author = author; this.stamps = stamps; } public String getAuthor() { return author; } public boolean isExpired() { boolean expired = super.isExpired(); if (expired &amp;&amp; this.stamps &lt; 3) { return true; } else { return false; } } public String toString() { return super.toString() + &quot;, &quot; + this.author; } } . public class Textbook extends Book { private String publishingCompany; public Textbook(String title, int bookLife, String publishingCompany) { super(title, bookLife); this.publishingCompany = publishingCompany; } public String getPublishingCompany() { return publishingCompany; } public String toString() { return super.toString() + &quot;, &quot; + this.publishingCompany; } } . public class Main { public static void main(String[] args) { Book.setBookCount(); Book book1 = new Book(&quot;Red Rose&quot;, 3); Novel novel1 = new Novel(&quot;Midnight Library&quot;, 2, &quot;John&quot;, 2); Textbook textbook1 = new Textbook(&quot;AP CSA&quot;, 4, &quot;Mort&quot;); System.out.println(&quot;Book 1: &quot; + book1.toString()); System.out.println(&quot;Book 2: &quot; + novel1.toString()); System.out.println(&quot;Book 3: &quot; + textbook1.toString()); System.out.println(&quot;Total Books: &quot; + Book.getBookCount()); try { Thread.sleep(3000); } catch(Exception e) { e.printStackTrace(); } System.out.println(&quot;Book 1: &quot; + book1.toString()); System.out.println(&quot;Book 2: &quot; + novel1.toString()); System.out.println(&quot;Book 3: &quot; + textbook1.toString()); } } Main.main(null); . Book 1: Red Rose, 1, 3 days, false Book 2: Midnight Library, 2, 2 days, false, John Book 3: AP CSA, 3, 4 days, false, Mort Total Books: 3 Book 1: Red Rose, 1, 3 days, false Book 2: Midnight Library, 2, 2 days, true, John Book 3: AP CSA, 3, 4 days, false, Mort .",
            "url": "https://boply.github.io/fastpages/jupyter/java/2023/04/20/Test.html",
            "relUrl": "/jupyter/java/2023/04/20/Test.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Hashmaps, Sorts, and Collegeboard",
            "content": "Hashmap Example . import java.util.HashMap; import java.util.Random; public class BookCollection { public static void main(String[] args) { HashMap&lt;String, String&gt; bookMap = new HashMap&lt;String, String&gt;(); // Add 5000 books and authors to the map for (int i = 0; i &lt; 5000; i++) { String isbn = &quot;ISBN&quot; + i; String author = &quot;Author&quot; + i; bookMap.put(isbn, author); } // Test performance of binary search vs HashMap lookup Random rand = new Random(); int[] searchKeys = new int[100]; for (int i = 0; i &lt; 100; i++) { searchKeys[i] = rand.nextInt(5000); } // Binary search long binarySearchTime = 0; for (int i = 0; i &lt; 12; i++) { long startTime = System.nanoTime(); for (int j = 0; j &lt; 100; j++) { String author = binarySearch(bookMap, searchKeys[j]); } long endTime = System.nanoTime(); long elapsedTime = endTime - startTime; binarySearchTime += elapsedTime; } System.out.println(&quot;Binary search average time: &quot; + (binarySearchTime / 12) + &quot; nanoseconds&quot;); // HashMap lookup long hashMapLookupTime = 0; for (int i = 0; i &lt; 12; i++) { long startTime = System.nanoTime(); for (int j = 0; j &lt; 100; j++) { String author = bookMap.get(&quot;ISBN&quot; + searchKeys[j]); } long endTime = System.nanoTime(); long elapsedTime = endTime - startTime; hashMapLookupTime += elapsedTime; } System.out.println(&quot;HashMap lookup average time: &quot; + (hashMapLookupTime / 12) + &quot; nanoseconds&quot;); } // Binary search implementation public static String binarySearch(HashMap&lt;String, String&gt; bookMap, int key) { String[] keys = bookMap.keySet().toArray(new String[bookMap.size()]); int low = 0; int high = keys.length - 1; while (low &lt;= high) { int mid = (low + high) / 2; String isbn = keys[mid]; int isbnNum = Integer.parseInt(isbn.substring(4)); if (isbnNum == key) { return bookMap.get(isbn); } else if (isbnNum &lt; key) { low = mid + 1; } else { high = mid - 1; } } return null; } } BookCollection.main(null); . Binary search average time: 4519482 nanoseconds HashMap lookup average time: 24691 nanoseconds . Different Collegeboard Swaps Comparison . import java.util.Arrays; public class SortComparison { private static int comparisons; private static int swaps; public static void selectionSort(int[] arr) { int n = arr.length; int comparisons = 0; int swaps = 0; for (int i = 0; i &lt; n - 1; i++) { int min_idx = i; for (int j = i + 1; j &lt; n; j++) { comparisons++; if (arr[j] &lt; arr[min_idx]) { min_idx = j; } } int temp = arr[min_idx]; arr[min_idx] = arr[i]; arr[i] = temp; swaps++; } System.out.println(&quot;Selection Sort - Comparisons: &quot; + comparisons + &quot; Swaps: &quot; + swaps); } public static void insertionSort(int[] arr) { int n = arr.length; int comparisons = 0; int swaps = 0; for (int i = 1; i &lt; n; ++i) { int key = arr[i]; int j = i - 1; while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) { comparisons++; arr[j + 1] = arr[j]; j = j - 1; swaps++; } arr[j + 1] = key; swaps++; } System.out.println(&quot;Insertion Sort - Comparisons: &quot; + comparisons + &quot; Swaps: &quot; + swaps); } public static void mergeSort(int[] arr, int l, int r) { if (l &lt; r) { int m = (l + r) / 2; mergeSort(arr, l, m); mergeSort(arr, m + 1, r); merge(arr, l, m, r); } } public static void merge(int[] arr, int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; int[] L = new int[n1]; int[] R = new int[n2]; for (int i = 0; i &lt; n1; ++i) L[i] = arr[l + i]; for (int j = 0; j &lt; n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { comparisons++; // increment comparisons for each comparison made if (L[i] &lt;= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i &lt; n1) { arr[k] = L[i]; i++; k++; } while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } public static void main(String[] args) { int[] arr1, arr2, arr3; // Selection Sort long start1 = System.nanoTime(); for (int i = 0; i &lt; 12; i++) { arr1 = new int[5000]; arr2 = new int[5000]; arr3 = new int[5000]; for (int j = 0; j &lt; 5000; j++) { int n = (int) (Math.random() * 10000); arr1[j] = n; arr2[j] = n; arr3[j] = n; } int[] temp = Arrays.copyOf(arr1, arr1.length); selectionSort(temp); } long end1 = System.nanoTime(); long time1 = end1 - start1; // Insertion Sort long start2 = System.nanoTime(); for (int i = 0; i &lt; 12; i++) { arr1 = new int[5000]; arr2 = new int[5000]; arr3 = new int[5000]; for (int j = 0; j &lt; 5000; j++) { int n = (int) (Math.random() * 10000); arr1[j] = n; arr2[j] = n; arr3[j] = n; } int[] temp = Arrays.copyOf(arr2, arr2.length); insertionSort(temp); } long end2 = System.nanoTime(); long time2 = end2 - start2; // Merge Sort long start3 = System.nanoTime(); for (int i = 0; i &lt; 12; i++) { arr1 = new int[5000]; arr2 = new int[5000]; arr3 = new int[5000]; for (int j = 0; j &lt; 5000; j++) { int n = (int) (Math.random() * 10000); arr1[j] = n; arr2[j] = n; arr3[j] = n; } int[] temp = Arrays.copyOf(arr3, arr3.length); comparisons = 0; // reset comparisons before each run mergeSort(temp, 0, temp.length - 1); System.out.println(&quot;Merge Sort - Comparisons: &quot; + comparisons); } long end3 = System.nanoTime(); long time3 = end3 - start3; System.out.println(&quot;Average time taken for Selection Sort: &quot; + (time1 / 12) + &quot; ns&quot;); System.out.println(&quot;Average time taken for Insertion Sort: &quot; + (time2 / 12) + &quot; ns&quot;); System.out.println(&quot;Average time taken for Merge Sort: &quot; + (time3 / 12) + &quot; ns&quot;); System.out.println(&quot;Best sort based on comparisons: Merge Sort&quot;); System.out.println(&quot;Best sort based on swaps: Insertion Sort&quot;); System.out.println(&quot;Best sort based on Big O complexity: Merge Sort&quot;); System.out.println(&quot;Best sort based on total time: Merge Sort&quot;); } } SortComparison.main(null); . Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Selection Sort - Comparisons: 12497500 Swaps: 4999 Insertion Sort - Comparisons: 6382668 Swaps: 6387667 Insertion Sort - Comparisons: 6171619 Swaps: 6176618 Insertion Sort - Comparisons: 6256964 Swaps: 6261963 Insertion Sort - Comparisons: 6232021 Swaps: 6237020 Insertion Sort - Comparisons: 6158159 Swaps: 6163158 Insertion Sort - Comparisons: 6137896 Swaps: 6142895 Insertion Sort - Comparisons: 6211994 Swaps: 6216993 Insertion Sort - Comparisons: 6174837 Swaps: 6179836 Insertion Sort - Comparisons: 6261744 Swaps: 6266743 Insertion Sort - Comparisons: 6365262 Swaps: 6370261 Insertion Sort - Comparisons: 6195461 Swaps: 6200460 Insertion Sort - Comparisons: 6282958 Swaps: 6287957 Merge Sort - Comparisons: 55269 Merge Sort - Comparisons: 55222 Merge Sort - Comparisons: 55212 Merge Sort - Comparisons: 55214 Merge Sort - Comparisons: 55222 Merge Sort - Comparisons: 55238 Merge Sort - Comparisons: 55293 Merge Sort - Comparisons: 55189 Merge Sort - Comparisons: 55208 Merge Sort - Comparisons: 55249 Merge Sort - Comparisons: 55225 Merge Sort - Comparisons: 55114 Average time taken for Selection Sort: 7532847 ns Average time taken for Insertion Sort: 2611069 ns Average time taken for Merge Sort: 1147066 ns Best sort based on comparisons: Merge Sort Best sort based on swaps: Insertion Sort Best sort based on Big O complexity: Merge Sort Best sort based on total time: Merge Sort . Collection HashMap . Pros: | Pros: | . - Simple and easy to use | - Fast lookup and insertion | . - Allows duplicates | - Provides key-value mapping | . - Preserves insertion order | - Supports null keys and values | . Cons: | Cons: | . - Slower for large collections | - More complex to use than Collection | . - No efficient way to search for an element | - Can cause collisions | . - No key-value mapping | - Does not preserve insertion order | . - Does not support null values | - Not thread-safe by default | .",
            "url": "https://boply.github.io/fastpages/jupyter/java/2023/04/06/Hashmaps.html",
            "relUrl": "/jupyter/java/2023/04/06/Hashmaps.html",
            "date": " • Apr 6, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Data, Classes, Inheritance",
            "content": "public class Quiz extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Quiz.key = key; } public enum KeyType implements KeyTypes {title, Question, AnswerA, AnswerB, AnswerC, AnswerD, CorrectAnswer} // Instance data private final String Question; private final String AnswerA; private final String AnswerB; private final String AnswerC; private final String AnswerD; private final int CorrectAnswer; /* constructor * */ public Quiz(String Question, String AnswerA, String AnswerB, String AnswerC, String AnswerD, int CorrectAnswer) { super.setType(&quot;Quiz&quot;); this.Question = Question; this.AnswerA = AnswerA; this.AnswerB = AnswerB; this.AnswerC = AnswerC; this.AnswerD = AnswerD; this.CorrectAnswer = CorrectAnswer; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Quiz.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.Question.equals(this.getKey())) { output += this.Question; } else if (KeyType.AnswerA.equals(this.getKey())) { output += this.AnswerA; } else if (KeyType.AnswerB.equals(this.getKey())) { output += this.AnswerB; } else if (KeyType.AnswerC.equals(this.getKey())) { output += this.AnswerC; } else if (KeyType.AnswerD.equals(this.getKey())) { output += this.AnswerD; } else if (KeyType.CorrectAnswer.equals(this.getKey())) { output += this.CorrectAnswer; } else { output += super.getType() + &quot;: &quot; + this.Question + &quot;, &quot; + this.AnswerA + &quot;, &quot; + this.AnswerB + &quot;, &quot; + this.AnswerC + &quot;, &quot; + this.AnswerD + &quot; | &quot; + this.CorrectAnswer; } return output; } // Test data initializer public static Quiz[] Quizes() { return new Quiz[]{ new Quiz(&quot;How many bones are in the human body?&quot;, &quot;201&quot;, &quot;206&quot;, &quot;199&quot;, &quot;200&quot;, 2), }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Quiz[] objs = Quizes(); // print with title Quiz.setOrder(KeyType.title); Quiz.print(objs); // print name only Quiz.setOrder(KeyType.Question); Quiz.print(objs); } } Quiz.main(null); . class [LREPL.$JShell$16C$Quiz; 1 Generic: Quiz listed by title Quiz: How many bones are in the human body?, 201, 206, 199, 200 | 2 class [LREPL.$JShell$16C$Quiz; 1 Generic: Quiz listed by Question How many bones are in the human body? .",
            "url": "https://boply.github.io/fastpages/jupyter/java/2023/03/22/Inheritance-Data.html",
            "relUrl": "/jupyter/java/2023/03/22/Inheritance-Data.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Generic Types",
            "content": "Armaan: 2.8/3 . Class Details . Access modifier: It specifies the level of access to the class members from outside the class. The most common access modifiers are public, private, protected, and internal. . Constructor: It is a special method that is called when an object of the class is created. It initializes the object&#39;s state and sets the initial values of its properties. . Modifiers/setters: These are methods that allow the values of the class&#39;s properties to be changed after the object has been created. They are also known as setter methods. . Getters: These are methods that allow the values of the class&#39;s properties to be retrieved from the object. They are also known as accessor methods. . Instance variables: These are the variables that store the state of the object. They are declared inside the class and are accessed using the object of the class. . Linked Lists and Queues . General Example . import java.util.Collections; import java.util.LinkedList; import java.util.Queue; import java.util.Random; import java.util.Stack; public class ListQueueStackExample { public static void main(String[] args) { // Create a linked list and add some elements to it LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;(); linkedList.add(&quot;Apple&quot;); linkedList.add(&quot;Banana&quot;); linkedList.add(&quot;Cherry&quot;); linkedList.add(&quot;Date&quot;); // Print the linked list System.out.println(&quot;Linked List: &quot; + linkedList); // Create a queue and add some elements to it Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); queue.add(&quot;Apple&quot;); queue.add(&quot;Banana&quot;); queue.add(&quot;Cherry&quot;); queue.add(&quot;Date&quot;); // Print the queue System.out.println(&quot;Queue: &quot; + queue); // Remove an element from the queue and print it String removedElement = queue.remove(); System.out.println(&quot;Removed element from Queue: &quot; + removedElement); // Create another queue and add some elements to it Queue&lt;Integer&gt; queue2 = new LinkedList&lt;&gt;(); queue2.add(1); queue2.add(3); queue2.add(5); queue2.add(7); // Merge the two queues into a new, ordered queue Queue&lt;Object&gt; mergedQueue = new LinkedList&lt;&gt;(); while (!queue.isEmpty() &amp;&amp; !queue2.isEmpty()) { if (queue.peek().compareTo(String.valueOf(queue2.peek())) &lt; 0) { mergedQueue.add(queue.remove()); } else { mergedQueue.add(queue2.remove()); } } if (!queue.isEmpty()) { mergedQueue.addAll(queue); } if (!queue2.isEmpty()) { mergedQueue.addAll(queue2); } // Print the merged queue System.out.println(&quot;Merged Queue: &quot; + mergedQueue); // Reverse the second queue using a stack Queue&lt;Character&gt; queue3 = new LinkedList&lt;&gt;(); queue3.add(&#39;A&#39;); queue3.add(&#39;B&#39;); queue3.add(&#39;C&#39;); queue3.add(&#39;D&#39;); Stack&lt;Character&gt; stack = new Stack&lt;&gt;(); while (!queue3.isEmpty()) { stack.push(queue3.remove()); } while (!stack.isEmpty()) { queue3.add(stack.pop()); } System.out.println(&quot;Reversed Queue: &quot; + queue3); // Implement a stack from the linked list LinkedList&lt;Integer&gt; linkedList2 = new LinkedList&lt;&gt;(); linkedList2.add(1); linkedList2.add(2); linkedList2.add(3); Stack&lt;Integer&gt; stack2 = new Stack&lt;&gt;(); stack2.addAll(linkedList2); System.out.println(&quot;Stack from Linked List: &quot; + stack2); } } ListQueueStackExample.main(null); . Linked List: [Apple, Banana, Cherry, Date] Queue: [Apple, Banana, Cherry, Date] Removed element from Queue: Apple Merged Queue: [1, 3, 5, 7, Banana, Cherry, Date] Reversed Queue: [D, C, B, A] Stack from Linked List: [1, 2, 3] . In Project Example . import java.util.Collections; import java.util.LinkedList; import java.util.Queue; import java.util.Random; import java.util.Stack; public class QuizExample { public static void main(String[] args) { // Create a linked list of questions and add some elements to it LinkedList&lt;String&gt; questionList = new LinkedList&lt;&gt;(); questionList.add(&quot;What is the capital of France?&quot;); questionList.add(&quot;Who wrote the novel &#39;To Kill a Mockingbird&#39;?&quot;); questionList.add(&quot;What is the smallest planet in our solar system?&quot;); questionList.add(&quot;What is the highest mountain in the world?&quot;); // Print the linked list of questions System.out.println(&quot;Question List: &quot; + questionList); // Create a queue of student answers and add some elements to it Queue&lt;String&gt; studentAnswers = new LinkedList&lt;&gt;(); studentAnswers.add(&quot;Paris&quot;); studentAnswers.add(&quot;Harper Lee&quot;); studentAnswers.add(&quot;Mercury&quot;); studentAnswers.add(&quot;Mount Everest&quot;); // Print the queue of student answers System.out.println(&quot;Student Answers Queue: &quot; + studentAnswers); // Remove an answer from the queue and print it String removedAnswer = studentAnswers.remove(); System.out.println(&quot;Removed Answer from Queue: &quot; + removedAnswer); // Create another queue of correct answers and add some elements to it Queue&lt;String&gt; correctAnswers = new LinkedList&lt;&gt;(); correctAnswers.add(&quot;Paris&quot;); correctAnswers.add(&quot;Harper Lee&quot;); correctAnswers.add(&quot;Mercury&quot;); correctAnswers.add(&quot;Mount Everest&quot;); // Merge the two queues into a new, ordered queue Queue&lt;String&gt; mergedQueue = new LinkedList&lt;&gt;(); while (!studentAnswers.isEmpty() &amp;&amp; !correctAnswers.isEmpty()) { if (studentAnswers.peek().compareTo(correctAnswers.peek()) &lt; 0) { mergedQueue.add(studentAnswers.remove()); } else { mergedQueue.add(correctAnswers.remove()); } } if (!studentAnswers.isEmpty()) { mergedQueue.addAll(studentAnswers); } if (!correctAnswers.isEmpty()) { mergedQueue.addAll(correctAnswers); } // Print the merged queue System.out.println(&quot;Merged Queue: &quot; + mergedQueue); // Shuffle the first queue of student answers Collections.shuffle((LinkedList&lt;String&gt;) studentAnswers); System.out.println(&quot;Shuffled Student Answers Queue: &quot; + studentAnswers); // Reverse the second queue of correct answers using a stack Queue&lt;Character&gt; correctAnswersQueue = new LinkedList&lt;&gt;(); correctAnswersQueue.add(&#39;A&#39;); correctAnswersQueue.add(&#39;B&#39;); correctAnswersQueue.add(&#39;C&#39;); correctAnswersQueue.add(&#39;D&#39;); Stack&lt;Character&gt; correctAnswersStack = new Stack&lt;&gt;(); while (!correctAnswersQueue.isEmpty()) { correctAnswersStack.push(correctAnswersQueue.remove()); } while (!correctAnswersStack.isEmpty()) { correctAnswersQueue.add(correctAnswersStack.pop()); } System.out.println(&quot;Reversed Correct Answers Queue: &quot; + correctAnswersQueue); // Implement a stack of scores from the linked list of questions LinkedList&lt;Integer&gt; scoresList = new LinkedList&lt;&gt;(); scoresList.add(1); scoresList.add(2); scoresList.add(3); Stack&lt;Integer&gt; scoreStack = new Stack&lt;&gt;(); scoreStack.addAll(scoresList); System.out.println(&quot;Score Stack from Linked List: &quot; + scoreStack); } } QuizExample.main(null); . Question List: [What is the capital of France?, Who wrote the novel &#39;To Kill a Mockingbird&#39;?, What is the smallest planet in our solar system?, What is the highest mountain in the world?] Student Answers Queue: [Paris, Harper Lee, Mercury, Mount Everest] Removed Answer from Queue: Paris Merged Queue: [Harper Lee, Mercury, Mount Everest, Paris, Harper Lee, Mercury, Mount Everest] Shuffled Student Answers Queue: [] Reversed Correct Answers Queue: [D, C, B, A] Score Stack from Linked List: [1, 2, 3] . For Each Loops . public class Enhanced{ public static void main(String[] args){ int[][] numbers = new int[5][10]; int x = 0; for (int[] rows: numbers){ for(int column: rows){ column = column + x; x++; System.out.print(column +&quot; &quot;); } System.out.println(); } } } Enhanced.main(null); . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 .",
            "url": "https://boply.github.io/fastpages/jupyter/java/2023/03/19/Generic-Types.html",
            "relUrl": "/jupyter/java/2023/03/19/Generic-Types.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "2015 MCQ Test Corrections",
            "content": "9. Generate random index for ArrayList . b. (int) (Math.random() * myList.size()) . This answer can&#39;t be A which is the one I chose because it ends with a -1. This doesn&#39;t work in this context as it starts with index 0 rather than 1 which I made the mistake of assuming. I will improve on this in the future because I now know that the array.size starts at index 0. . 18. Print odd integers in 1D array but not even . a. for (int x : arr) if (x % 2 != 0) System.out.println(x); . Can&#39;t be C because you don&#39;t want to print the end result of the array index but instead print the number that is even. A is correct since it prints x instead of arr[x]. I will make sure to not have this problem arise in the future by paying more attention to the wording of the question. . 27. Mystery Method with Int Parameter . d. 8 . This is the correct answer over c because I simply did my arithmetic wrong. It&#39;s not really a matter of not understanding the material but rather my desire to finish the question in a timely manner. In order to prevent mistakes like this from happening on easy problems I need to take my time which was also my issue for the last question. . Reflection . All in all I do think I did really well on this practice test since if it was the AP exam I would have gotten a five. However that doesn&#39;t mean I got a 100%. As we saw throughout this blog I made a lot of silly mistakes that could be realized and overwritten by just taking my time on the questions. Naturally I want to finish the test as soon as possible so making these little mistakes is easy. Going into the real AP MCQ and for really the future of my classes I think it&#39;s really important that I take more time on the questions are really understand what it&#39;s not only asking but also simple calculations that I could get wrong from rushing. .",
            "url": "https://boply.github.io/fastpages/jupyter/java/2023/03/12/TestCorrections.html",
            "relUrl": "/jupyter/java/2023/03/12/TestCorrections.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Data Types",
            "content": "1 + 1 = 10 because in binary 10 or one-zero is 2. . import java.util.Scanner; public class BinaryLong { public static void main(String[] args) { // Two added values to equal binary int a = 1; int b = 1; //Two variables int i = 0, carry = 0; //This is to hold the output binary number int[] sum = new int[10]; int b1 = a; int b2 = b; //while the ints are not 0, code uses mod while (b1 != 0 || b2 != 0) { sum[i++] = (int)((b1 % 10 + b2 % 10 + carry) % 2); carry = (int)((b1 % 10 + b2 % 10 + carry) / 2); b1 = b1 / 10; b2 = b2 / 10; } if (carry != 0) { sum[i++] = carry; } --i; System.out.print(a + &quot; + &quot; + b + &quot; = &quot;); while (i &gt;= 0) { System.out.print(sum[i--]); } System.out.print(&quot; n&quot;); } } BinaryLong.main(null); . 1 + 1 = 10 . import java.lang.Math; public class BinaryShort { public static void main(String[] args) { int a = 0b1; int b = 0b1; int sum = a + b; System.out.println(Integer.toBinaryString(sum)); } } BinaryShort.main(null); . Primitive Examples . import java.util.Random; public class PrimitiveTypesExample { public static void main(String[] args) { // int example int[] numbers = {1, 2, 3, 4, 5}; int randomNumber = new Random().nextInt(numbers.length); System.out.println(&quot;Random number from array: &quot; + numbers[randomNumber]); // double example double pi = 3.141592653589793238; System.out.println(&quot;Pi: &quot; + pi); // boolean example boolean isJavaFun = true; System.out.println(&quot;Is Java fun? &quot; + isJavaFun); // char example String message = &quot;Hello, world!&quot;; char firstLetter = message.charAt(0); System.out.println(&quot;First letter of message: &quot; + firstLetter); } } PrimitiveTypesExample.main(null); . Random number from array: 2 Pi: 3.141592653589793 Is Java fun? true First letter of message: H . Wrapper Class Examples . import java.util.Arrays; public class PrimitiveTypesExample { public static void main(String[] args) { // int example with wrapper class Integer[] numbers = {1, 2, 3, 4, 5}; int sum = Arrays.stream(numbers).mapToInt(Integer::intValue).sum(); System.out.println(&quot;Sum of numbers: &quot; + sum); // double example with wrapper class Double[] temperatures = {25.6, 28.9, 30.1, 23.4, 21.0}; double average = Arrays.stream(temperatures).mapToDouble(Double::doubleValue).average().getAsDouble(); System.out.println(&quot;Average temperature: &quot; + average); // boolean example with wrapper class Boolean[] choices = {true, false, false, true}; long countTrue = Arrays.stream(choices).filter(Boolean::booleanValue).count(); System.out.println(&quot;Number of true choices: &quot; + countTrue); // char example with wrapper class Character[] letters = {&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;,&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;, &#39;!&#39;}; String message = Arrays.stream(letters).map(Object::toString).reduce(&quot;&quot;, String::concat); System.out.println(&quot;Message: &quot; + message); } } PrimitiveTypesExample.main(null); . Sum of numbers: 15 Average temperature: 25.8 Number of true choices: 2 Message: Hello, world! . Methods and Control Structures . Methods . In Java, a method is a set of code that performs a specific task. Methods enable code reusability and modularity. A method can receive parameters as input and return a value as output. . Control Structures . Control structures are programming statements that manage the program&#39;s execution flow. In Java, conditional statements, loops, and switch statements are the common control structures. . Methods and Control Structures in methodDataTypes . methodDataTypes is a Java project consisting of various classes that exemplify the use of methods and control structures. For instance, the DiverseArrays and Matrix classes demonstrate the use of control structures like loops and conditional statements to perform operations on arrays and matrices. The Number and Random classes demonstrate the use of control structures for performing operations on numbers, and the DoNothingByValue and IntByReference classes illustrate how passing parameters to methods works. Lastly, the Menu class demonstrates the use of control structures to control the flow of execution of the program. . import java.util.Scanner; public class Menu { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int choice = 0; Runnable menuRunnable = () -&gt; { System.out.println(&quot;Menu:&quot;); System.out.println(&quot;1. Option 1&quot;); System.out.println(&quot;2. Option 2&quot;); System.out.println(&quot;3. Option 3&quot;); System.out.println(&quot;4. Exit&quot;); System.out.print(&quot;Enter your choice: &quot;); }; while (choice != 4) { try { menuRunnable.run(); choice = scanner.nextInt(); scanner.nextLine(); switch (choice) { case 1: System.out.println(&quot;Option 1 selected&quot;); break; case 2: System.out.println(&quot;Option 2 selected&quot;); break; case 3: System.out.println(&quot;Option 3 selected&quot;); break; case 4: System.out.println(&quot;Goodbye!&quot;); break; default: System.out.println(&quot;Invalid choice!&quot;); break; } } catch (Exception e) { System.out.println(&quot;Invalid input. Please try again.&quot;); scanner.nextLine(); } } scanner.close(); } } Menu.main(null); . Menu: 1. Option 1 2. Option 2 3. Option 3 4. Exit Enter your choice: Option 1 selected Menu: 1. Option 1 2. Option 2 3. Option 3 4. Exit Enter your choice: Goodbye! . 2015 FRQ Question 1 . a. . public static int arraySum(int[] arr) { int sum = 0; for (int n: arr) sum += n; return sum; } . The code defines a method named arraySum that takes an array of integers as input and returns the sum of all the integers in the array. It starts by initializing a variable sum to zero, and then loops through the elements in the array using a for-each loop. In each iteration, it adds the current element to the sum variable. Finally, it returns the sum variable which holds the total sum of all elements in the array. . b. . public static int[] rowSums(int[][] arr2D) { int[] sums = new int[arr2D.length]; for (int i = 0; i &lt; sums.length; i++) { sums[i] = arraySum(arr2D[i]); } return sums; } . The code defines a static method called rowSums that takes a two-dimensional integer array arr2D as an input and returns a one-dimensional integer array. The method initializes a new integer array sums with the same length as the number of rows in the input array. . The method then iterates through each row in the input array using a for loop. For each row, it calls another method called arraySum to calculate the sum of all the elements in the row. The result is stored in the corresponding index of the sums array. . Finally, the method returns the sums array containing the sum of each row in the input array. . In summary, the rowSums method calculates the sum of each row in a two-dimensional integer array and returns the result in a new one-dimensional integer array. . c. . public static boolean isDiverse(int[][] arr2D) { int[] sums = rowSums(arr2D); for (int i = 0; i &lt; sums.length; i++) for (int j = i + 1; j &lt; sums.length; j++) if (sums[i] == sums[j]) return false; return true; } . The isDiverse method is a static method that takes a two-dimensional integer array as input and returns a boolean value. It uses the rowSums method to calculate the sum of each row of the input array and stores the resulting sums in a new array called sums. . The method then compares each sum in the sums array with all other sums in the array to determine whether any two rows have the same sum. If it finds any such duplicate sums, it immediately returns false to indicate that the input array is not diverse. Otherwise, if it reaches the end of the loops without finding any duplicates, it returns true to indicate that the input array is diverse. . In essence, the isDiverse method checks whether a two-dimensional array is diverse, meaning that none of its rows has the same sum as any other row, by calculating row sums and comparing them to one another. .",
            "url": "https://boply.github.io/fastpages/jupyter/java/2023/03/06/Data-Types.html",
            "relUrl": "/jupyter/java/2023/03/06/Data-Types.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "52 Question Quiz",
            "content": "Revisions . Question 5 . Array with A through L . . After revisiting this question I can see that instead of d the correct answer is e. I just didn’t know the proper notation for the array syntax. I can now answer this question in the future now that I’ve seen the correct syntax. . Question 7 . Combine Method . . After coming back to this question I can see that instead of c the correct answer is B. This is because I did the last part wrong. I need to take more time on these quizes. . Question 19 . For loop substring . . After re-seeing this question, instead of picking E I should’ve picked D. This is because I made the mistake of K starting at 10 instead of 9. This was again a time issue and I’m sure I would’ve gotten it right have I paid more time and attention. . Question 37 . processWords Method . . After coming back to this question I can see that the answer is not C but A. This is because I only really looked at the final part rather than the whole thing. This was an overlook on my part but I’m sure I can easily do this if I pay more attention. I was just getting tired of this practice quiz. . Question 46 . StudentInfo class and averageInMajor method . . After coming back to this question I can see that rather than C, B is the right answer. I oversaw the answer and instead of using k.getMajor(), I used k.major. This was just me not paying attention towards the end of the test but now I recall the proper notion for future questions. . Question 52 . X and O board . . After re-seeing this question I can see that the answer is E rather than B. I missed the second half of the board for some reason. I can’t even remember what exactly I was thinking when I answered this but now I know it’s wrong. I should be able to get these right in the future. .",
            "url": "https://boply.github.io/fastpages/markdown/week-17/2023/01/31/52-Questions.html",
            "relUrl": "/markdown/week-17/2023/01/31/52-Questions.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "66 Question Quiz",
            "content": "Revisions . Question 16 . 2D Count array columns . . After revisiting this question I can see that instead of E the correct answer is C. I just didn’t know the proper notation for the array syntax. I can now answer this question in the future now that I’ve seen the correct syntax. . Question 19 . . Equivalent Expressions . After coming back to this question I can see that instead of E the correct answer is A. This is because I forgot to include the negative notation on the &amp;&amp; and the first part. This was just a time issue since I was rushing on a weekend quiz. . Question 35 . . For loops that produce the same output . After re-seeing this question, instead of picking E I should’ve picked D. This is because I made the mistake of K starting at 10 instead of 9. This was again a time issue and I’m sure I would’ve gotten it right have I paid more time and attention. . Question 37 . If and compound boolean equivalence . . After coming back to this question I can see that the answer is not D but E. This is because I didn’t use an |   | statement separating the two expressions and instead used and &amp;&amp;. This was an overlook on my part but I’m sure I can easily do this if I pay more attention. | . Question 41 . Mystery call to get 11 . . After coming back to this question I can see that rather than C, B is the right answer. This is because I reversed all the trues and false for whatever reason. I can do this question in the future as I guess I lost my train of thought somewhere between answering and putting down the answer. . Question 50 . PrintSome method . . After re-seeing this question I can see that the answer is D rather than C. This is because I didn’t see that the 10 would be divided by two. This was not a lack of knowledge however but just a minor mistake. I can fix this going through the future by rereading the question multiple times to be sure I have the right answer. . Question 66 . Which while loop equivalent to for loop . . After revisiting this question I can see that the answer is B rather than C. This is because I not only added two to the J first but also included 10 rather than just stopping at 10. This will be easy to fix in the future as I need to know that it runs an extra time when you use an equal sign. .",
            "url": "https://boply.github.io/fastpages/markdown/week-16/2023/01/22/66-Questions.html",
            "relUrl": "/markdown/week-16/2023/01/22/66-Questions.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Units 6-10 HW and Vocab",
            "content": "Homework . Grading . Unit Grade . 6 | 0.85/1 | . 7 | 0.8/1 | . 8 | 0.95/1 | . 9 | 0.9/1 | . 10 | 1/1 | . Total | 4.5/5 | . Unit 6 - Array . public class ArrayMethods { private static int[] values = {1, 2, 3, 4, 5}; public void printElements(){ for(int a = 0; a &lt; values.length; a++){ System.out.println(values[a]); } } public void swapElements(){ int firstElement = values[0]; values[0] = values[values.length-1]; values[values.length-1] = firstElement; } public void changeToZero() { for(int a = 0; a &lt; values.length; a++){ if(values[a] % 2 == 0){ values[a] = 0; } } } public static boolean checkSort(int[] a) { for (int i = 0; i &lt; a.length - 1; i++) { if (a[i] &gt; a[i + 1]) { return false; } } return true; } public static void main(String[] args) { System.out.println(&quot;First and Last Element Swap: &quot;); ArrayMethods swapElements = new ArrayMethods(); swapElements.swapElements(); swapElements.printElements(); System.out.println(&quot;Replacing All Elements w/ Zero: &quot;); ArrayMethods changeToZero = new ArrayMethods(); changeToZero.changeToZero(); changeToZero.printElements(); System.out.println(&quot;Array In Increasing Order: &quot; + (checkSort(values))); } } ArrayMethods.main(null); . First and Last Element Swap: 5 2 3 4 1 Replacing All Elements w/ Zero: 5 0 3 0 1 Array In Increasing Order: false . Vocab . Arrays are simply ordinary primitives/non-primitives but in a list format. If you have a string they would be separated by commas. For example &quot;Dog, Cat, Bear, Owl&quot; Integer are like this as well except without quotations. | An array declaration is when you first initialize the array. An example of this is seen above with: &quot;private static int[] values = {1, 2, 3, 4, 5};&quot; | The array index are the elements of the array in a numbered list starting from 0. Like in the example used above there would be an index up to 4. | . Unit 7 - Array List . ArrayList&lt;Integer&gt; n = new ArrayList&lt;Integer&gt;(); boolean a; boolean b; for (int i = 0; i &lt; 5; i++){ n.add(i); } for (int i = 5; i &gt; 0; i--){ n.add(i); } System.out.println(&quot;HashCode: &quot; + n.hashCode()); System.out.println(&quot;Original: &quot; + n); n.sort(Comparator.reverseOrder()); System.out.println(&quot;Sorted: &quot; + n); System.out.println(&quot;HashCode: &quot; + n.hashCode()); Collections.swap(n, 4, 0); System.out.println(&quot;Swapped first and last: &quot; + n); System.out.println(&quot;HashCode: &quot; + n.hashCode()); for (int i=0; i &lt; n.size() - 1; i++){ if (!(n.get(i) &lt;= n.get(i + 1))){ boolean a = false; } if (!(n.get(i) &gt;= n.get(i + 1))){ boolean b = false; } } if (a){ System.out.println(&quot;ascending&quot;); } if (b){ System.out.println(&quot;descending&quot;); } else{ System.out.println(&quot;neither&quot;); } . HashCode: -1631985086 Original: [0, 1, 2, 3, 4, 5, 4, 3, 2, 1] Sorted: [5, 4, 4, 3, 3, 2, 2, 1, 1, 0] HashCode: -287789284 Swapped first and last: [3, 4, 4, 3, 5, 2, 2, 1, 1, 0] HashCode: 162496028 neither . Vocab . Array lists are (as the name implies) a list of arrays. This list can add indexes, remove, clear and many other things. I personally find these extremely helpful in most of my projects. | Auto boxing is where you convert a primitive type to a wrapper class type. For example when you add a number it gets converted to an integer. | ArrayList declaration is the initialization for the array list. For example in the code above when I use: &quot;ArrayList n = new ArrayList();&quot; It&#39;s unlike the OG array because you add the elements after instead of with the declaration.&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Unit 8 - 2D Array . import java.util.*; import java.lang.Math.*; public class Learning { private int[][] arr = new int[3][3]; private int[][] reversed_arr = new int[3][3]; public static void main(String[] args) { Learning l = new Learning(); l.origInit(); l.reversedArray(); System.out.println(&quot;Value of 1,1: &quot; + l.valueOf(1, 1)); System.out.println(&quot;Sum of products of rows: &quot; + l.productSum()); Learning w = new Learning(); w.origInit(); w.reversedArray(); System.out.println(&quot;Value of 2,1: &quot; + w.valueOf(2, 1)); System.out.println(&quot;Sum of products of rows: &quot; + w.productSum()); } public void origInit() { System.out.println(&quot; nOriginal array:&quot;); // Assign a random value to the 2D array and print it for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[i].length; j++) { // Assign a random value to the 2D array using math.random() arr[i][j] = (int) (Math.random() * 10); System.out.print(arr[i][j] + &quot; &quot;); } System.out.println(); } } public void reversedArray() { System.out.println(&quot; nReversed array:&quot;); // Reverse the 2D array and print it for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[i].length; j++) { // Reverses array by going backwards through the original array reversed_arr[i][j] = arr[arr.length - 1 - i][arr[i].length - 1 - j]; System.out.print(reversed_arr[i][j] + &quot; &quot;); } System.out.println(); } } public int productSum() { int product = 1; int sum = 0; for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[i].length; j++) { // multiply product by value at this array index product *= arr[i][j]; } // add product to sum after all in row were multiplied, then reset product back to 1 sum += product; product = 1; } return sum; } public int valueOf(int a, int b) { // try to get array value, return exception if can&#39;t try { return arr[a][b]; } catch (Exception e) { System.out.println(&quot;Error: &quot; + e); return -1; } } } Learning.main(null); . Original array: 2 6 3 6 7 5 4 9 5 Reversed array: 5 9 4 5 7 6 3 6 2 Value of 1,1: 7 Sum of products of rows: 426 Original array: 6 8 3 8 3 4 1 2 1 Reversed array: 1 2 1 4 3 8 3 8 6 Value of 2,1: 2 Sum of products of rows: 242 . Vocab . 2D arrays are made of a type of coordinate system. It&#39;s most commonly used to create tables of information just like in this case where we have a product table. It can also be used to create text images like what we did in the first trimester. | 2D array declaration is how you create the array. For example in the code I used above it says, &quot;private int[][] arr = new int[3][3];&quot; | Rows are the values along the X-axis. | Columns are the values along the y-axis. | . Unit 9 - Inheritance . public class WorldCup { public String team1; public String team2; public String color; public WorldCup (String team1, String team2, String color){ this.team1 = team1; this.team2 = team2; this.color = color; } public String getTeam1(){ return team1; } public String getTeam2(){ return team2; } public void main(String[] args) { System.out.println(&quot;Team 1: &quot; + this.team1); System.out.println(&quot;Team 2: &quot; + this.team2); System.out.println(&quot;Team Colors: &quot; + this.color); } } public class Argentina extends WorldCup { public Argentina(String team1, String team2, String color){ super(team1, team2, color); } } public class Portugal extends WorldCup { public Portugal(String team1, String team2, String color){ super(team1, team2, color); } } Argentina arg = new Argentina(&quot;Argentina&quot;, &quot;Null&quot;, &quot;Blue and White&quot;); Portugal por = new Portugal(&quot;Portugal&quot;, &quot;Null&quot;, &quot;Green and Red&quot;); arg.main(null); por.main(null); . Team 1: Argentina Team 2: Null Team Colors: Blue and White Team 1: Portugal Team 2: Null Team Colors: Green and Red . import java.time.LocalDate; import java.time.Period; import java.time.ZoneId; import java.util.Date; public class Person { private String name; private String birthday; private int age; public Person (String name, String birthday){ this.name = name; this.birthday = birthday; } // getters public String getName(){ return name; } public String getBirthday(){ return birthday; } // calculate age public int getAge(){ LocalDate date = LocalDate.parse(this.birthday); return Period.between(date, LocalDate.now()).getYears(); } // to String for general person public String toString(){ return(&quot;Name: &quot; + this.getName() + &quot;, Birthday: &quot; + this.getBirthday() + &quot;, Age: &quot; + this.getAge()); } } public class Student extends Person { private int grade; private double gpa; private String favSubject; public Student (String name, String birthday, int grade, double gpa, String favSubject) { super(name, birthday); this.grade = grade; this.gpa = gpa; this.favSubject = favSubject; } // additional getters for attributes specific to subclass public int getGrade(){ return grade; } public double getGPA(){ return gpa; } public String getFavSubject(){ return favSubject; } @Override // custom toString() for Student subclass public String toString(){ return(&quot;Name: &quot; + this.getName() + &quot;, Birthday: &quot; + this.getBirthday() + &quot;, Age: &quot; + this.getAge() + &quot;, Grade: &quot; + this.getGrade() + &quot;, GPA: &quot; + this.getGPA() + &quot;, Favorite Subject: &quot; + this.getFavSubject()); } } public class Teacher extends Person { private int yrsExperience; private String hmtwn; private String subTaught; public Teacher(String name, String birthday, int yrsExperience, String hmtwn, String subTaught){ super(name, birthday); this.yrsExperience = yrsExperience; this.hmtwn = hmtwn; this.subTaught = subTaught; } public int getYrsExperience(){ return yrsExperience; } public String getHmtwn(){ return hmtwn; } public String getSubTaught(){ return subTaught; } @Override public String toString(){ return(&quot;Name: &quot; + this.getName() + &quot;, Birthday: &quot; + this.getBirthday() + &quot;, Age: &quot; + this.getAge() + &quot;, Years of Experience: &quot; + this.getYrsExperience() + &quot;, Hometown: &quot; + this.getHmtwn() + &quot;, Subject Taught: &quot; + this.getSubTaught()); } } public class Homework{ public static void main(String[] args) { Person p = new Person(&quot;Bob&quot;, &quot;2018-05-05&quot;); System.out.println(&quot;Person: &quot; + p); Student s = new Student(&quot;Joe&quot;, &quot;2010-11-01&quot;, 11, 4.9, &quot;Math&quot;); System.out.println(&quot;Student: &quot; + s); Teacher t = new Teacher(&quot;Mr. Blob&quot;, &quot;1652-11-09&quot;, 300, &quot;San Diego&quot;, &quot;AP Bio&quot;); System.out.println(&quot;Teacher: &quot; + t); // inheritance hierarchy, reference type and object type are not the same Person p2 = new Teacher(&quot;Mr. Mort&quot;, &quot;1990-12-10&quot;, 11, &quot;San Diego&quot;, &quot;Computer Science&quot;); System.out.println(&quot;Teacher: &quot; + p2); } } Homework.main(null); . Person: Name: Bob, Birthday: 2018-05-05, Age: 4 Student: Name: Joe, Birthday: 2010-11-01, Age: 12, Grade: 11, GPA: 4.9, Favorite Subject: Math Teacher: Name: Mr. Blob, Birthday: 1652-11-09, Age: 370, Years of Experience: 300, Hometown: San Diego, Subject Taught: AP Bio Teacher: Name: Mr. Mort, Birthday: 1990-12-10, Age: 32, Years of Experience: 11, Hometown: San Diego, Subject Taught: Computer Science . Vocab . Inheritance is simply a parent-child class system. The child inherits the parents attributes but the child can also build on its own attributes. The child can also have children of its own for a complex inheritance system. Looking at the example above we can see how the parent class &quot;Team&quot; passes all its traits down to the child class of Argentina, Portugal, France, and US. The attributes state the name, country, wins, and loses. | To put it out of metaphorical terms it&#39;s superclasses and subclasses. | Override is when the subclass had the same method signature as the superclass. | Polymorphism is where you can use the same method across multiple objects and is essentially one of the most important concepts of coding. | . Unit 10 - Recursion . Example . // Recursion public class fibo{ public static int fibonacciRecursion(int x){ if(x == 0){ return 0; } if(x == 1 || x == 2){ return 1; } return fibonacciRecursion(x-2) + fibonacciRecursion(x-1); } public static void main(String args[]) { int n = 25; System.out.print(n + &quot; numbers in sequence: n&quot;); for(int i = 0; i &lt; n; i++){ System.out.print(fibonacciRecursion(i) + &quot; &quot;); } } } fibo.main(null) . 25 numbers in sequence: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 . Vocab . Recursion is where a function calls to itself in order to loop until a condition is met. This is usually in the form of an if-else statement where if its else then it just loops again with a different input. Refer to the example above. | Iteration is where you describe code that is to be looped. For example is recursion the code that&#39;s being looped is a function that keeps calling to itself. | Base case is where a solution is too simple and it doesn&#39;t even need to use recursion. In this example above it&#39;s the check for if X is equal to 0, 1 or 2. | Recursive case the else part of the function. When it&#39;s not the base case it runs the recursive case. | . &lt;/div&gt; | .",
            "url": "https://boply.github.io/fastpages/jupyter/week-14/2022/12/14/Units-6-10.html",
            "relUrl": "/jupyter/week-14/2022/12/14/Units-6-10.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Units 1-5",
            "content": "Period 1 Unit 4 HW Grading LINK . My Grades from Units . Unit Grade . 1 | 0.9/1 | . 2 | 0.95/1 | . 3 | 0.5/1 | . 4 | 1/1 | . 5 | 0.9/1 | . Unit 3 I did the wrong period and couldn&#39;t get it graded. | . Unit 1: Primitive Types . Data Types | Arithmetic Operators | Compound Assignment Operators | Increment/Decrement Operators | Casting | Division | Truncating | Rounding | Concatenation | Math class (random) # Unit 2: Using Objects | Constructors | Syntax | Methods | Accessor Modifiers | String Objects # Unit 3: Booleans and Conditionals | De Morgan’s Law | Compound boolean expression | Comparing numbers/strings | Comparing objects # Unit 4: Iteration | For Loop | While Loop | Recursion Loop | Nested Loop # Unit 5: Writing Classes | Accessor Method (Getter) | toString() Method | Mutator (Modifier) Method (Setter) | Writing Methods | . Definitions . Unit 1 . Data types: primitive types like integers, strings, or bytes. Non-primitive like strings, or more abstract ones. . Arithmetic operators: operators are like addition, subtraction, multiplication, and division. (+ - * /) . Compound assignment operators: this includes &lt;= less than or equal to or *=. Pretty much links an arithmetic operators to a binary one. . Increment/Decrement operators: increase and set the variable by one. Decrease and set the variable by one. . Casting: This includes division, truncating, and rounding. This basically means to change the data type of a variable to another. This could make an integer a double or an integer a string. . Concatenation: operation of joining two string together. . Math class: This is a java class that allows access to different math expressions. This includes random and absolute value. . Unit 2 . Constructors: a specific subroutine to create an object. For example you can specify a variable amount. . Syntax: the specific way you need to type things. It sounds complicated by the worst part is forgetting a semicolon at the end of a line. . Accessor Modifiers: this could include private, public or even protected. Private means that the function (or variable) can only be accessed in the same class. Opposite public means that it can be accessed in any class. Lastly, protected means that it can only be accessed from its own class and subclasses. . Unit 3 . De Morgan&#39;s Law: an equal statement comparing !(a &amp;&amp; b) == !a || !b. This also goes for less than or equal to where !&lt; == &gt;=. . Compound boolean expressions: These are when you need to run multiple tests in an if statement. This can be done by having an AND (&amp;&amp;) or an or (||) . Comparing objects: you can also compare objects which includes seeing if an object is a sub-unit of another. . Unit 4 . For Loop: a loop statement allowing the simplification of code through a condition. In this case the loop runs for as long as something is true. Usually for a set period of time. . While Loop: this loop statement runs for as long as a condition is true. While true, do this. This is used when the period of time is not set. . Recursion Loop: this loop includes running the function from itself. . Unit 5 . Accessor Method (Getter): allow a way to get the value of each instance variable from outside of the class . toString() Method: an in-built method in Java that returns the value given to it in string format . Mutator (Modifier) Method (Setter): commonly known as a set method or simply a setter . Writing Methods: a block of code which only runs when it is called. You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions. .",
            "url": "https://boply.github.io/fastpages/jupyter/week-13/2022/11/29/Units-1-5.html",
            "relUrl": "/jupyter/week-13/2022/11/29/Units-1-5.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "2014 MCQ Test Corrections",
            "content": "18. Generate random index for ArrayList . b. (int) (Math.random() * myList.size()) . This answer can&#39;t be A which is the one I chose because it ends with a -1. This doesn&#39;t work in this context as it starts with index 0 rather than 1 which I made the mistake of assuming. I will improve on this in the future because I now know that the array.size starts at index 0. . 26. Print odd integers in 1D array but not even . a. for (int x : arr) if (x % 2 != 0) System.out.println(x); . Can&#39;t be C because you don&#39;t want to print the end result of the array index but instead print the number that is even. A is correct since it prints x instead of arr[x]. I will make sure to not have this problem arise in the future by paying more attention to the wording of the question. . 27. Mystery Method with Int Parameter . d. 8 . This is the correct answer over c because I simply did my arithmetic wrong. It&#39;s not really a matter of not understanding the material but rather my desire to finish the question in a timely manner. In order to prevent mistakes like this from happening on easy problems I need to take my time which was also my issue for the last question. . 29. Print values divisible by 4 using for loop . e. for (int k = 4; k &lt;= 100; k = k + 4) System.out.println(k); . This is the correct answer over B because I need to set the K value to 4 at the start of the for loop rather than 1 which was in the answer I chose. This is because rather than the starting lines of code it doesn&#39;t increment by 1 but rather 4. Therefore, k must start at 4. I can solve this issue in the future by again taking more time and thinking about the answer logically before choosing something. (I think there&#39;s a running theme with just small mistakes.) . Reflection . All in all I do think I did really well on this practice test since if it was the AP exam I would have gotten a five. However that doesn&#39;t mean I got a 100%. As we saw throughout this blog I made a lot of silly mistakes that could be realized and overwritten by just taking my time on the questions. Naturally I want to finish the test as soon as possible so making these little mistakes is easy. Going into the real AP MCQ and for really the future of my classes I think it&#39;s really important that I take more time on the questions are really understand what it&#39;s not only asking but also simple calculations that I could get wrong from rushing. .",
            "url": "https://boply.github.io/fastpages/jupyter/week-11/2022/11/08/TestCorrections.html",
            "relUrl": "/jupyter/week-11/2022/11/08/TestCorrections.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Night at the Museum",
            "content": "Frontend Repo . Backend Repo . API Controller . Team Issue . - Pojo - Fetch - Database . Home . . Help . . Flashcards . . Quiz . . Login . . Others Testing Site . .",
            "url": "https://boply.github.io/fastpages/markdown/week-11/2022/11/08/NightMuseum.html",
            "relUrl": "/markdown/week-11/2022/11/08/NightMuseum.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Presentations HW",
            "content": "Unit 1 - Primitive Types FRQ 2006 . 2A . public double purchasePrice() { return (1 + taxRate) * getListPrice(); } . 3A . public int compareCustomer(Customer other) { int nameCompare = getName().compareTo(other.getName()); if (nameCompare != 0) { return nameCompare; } else { return getID() - other.getID(); } } . Unit 2 - Using Objects - Goblin Game . public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey misses... Gunther the great HP: 4 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 11 jeffrey attacks Gunther the great! jeffrey misses... Gunther the great HP: 4 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 10 jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 9 jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 0 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 8 Gunther the great has perished . Unit 3 - Boolean and If Statements . Conditional Exercise . 2) Write a Java program to solve quadratic equations (use if, else if and else). . import java.util.Scanner; public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: Input b: Input c: The roots are -0.4384471871911697 and -4.561552812808831 . 4) Write a Java program that reads a floating-point number and prints &quot;zero&quot; if the number is zero. Otherwise, print &quot;positive&quot; or &quot;negative&quot;. Add &quot;small&quot; if the absolute value of the number is less than 1, or &quot;large&quot; if it exceeds 1,000,000. . import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . Input value: Positive number . 6) Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places. . import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . Input floating-point number: Input floating-point another number: They are different . 8) Write a Java program that takes the user to provide a single character from the alphabet. Print Vowel or Consonant, depending on the user input. If the user input is not a letter (between a and z or A and Z), or is a string of length &gt; 1, print an error message . import java.util.Scanner; public class Exercise8 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } } } Exercise8.main(null); . Input an alphabet: Input letter is Consonant . 10) Write a program in Java to display the first 10 natural numbers. . public class Exercise10 { public static void main(String[] args) { int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . 12) Write a program in Java to input 5 numbers from keyboard and find their sum and average . import java.util.Scanner; public class Exercise12 { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); } } Exercise12.main(null); . Input the 5 numbers : The sum of 5 no is : 15 The Average is : 3.0 . 14) Write a program in Java to display the multiplication table of a given integer. . import java.util.Scanner; public class Exercise14 { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } Exercise14.main(null); . Input the number(Table to be calculated): Input number of terms : 5 X 0 = 0 5 X 1 = 5 5 X 2 = 10 5 X 3 = 15 5 X 4 = 20 5 X 5 = 25 . 16) Write a program in Java to display the pattern like right angle triangle with a number. . import java.util.Scanner; public class Exercise16 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } } } Exercise16.main(null); . Input number of rows : 1 12 123 1234 12345 123456 1234567 12345678 123456789 12345678910 . 18) Write a program in Java to make such a pattern like right angle triangle with number increased by 1. . import java.util.Scanner; public class Exercise18 { public static void main(String[] args) { int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } } } Exercise18.main(null); . Input number of rows : 1 23 456 78910 . 20) Write a program in Java to print the Floyd&#39;s Triangle. . import java.util.Scanner; public class Exercise20 { public static void main(String[] args) { int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } Exercise20.main(null); . Input number of rows : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . Unit 4 - 2019 FRQ 1 . 1A . public static int numberOfLeapYears(int year1, int year2) { leapYears = 0 n = year2 - year1; for (i = 0, i&lt;n, ++i) { if (isLeapYear(year1 + i)) { ++leapYears; } } return leapYears; } . 1B . public static int dayOfWeek(int month, int day, int year) { int weekday = firstDayOfYear(year); int additionalDays = dayOfYear(month, day, year) - 1; for(int d = 1; d &lt;= additionalDays; d++) { weekday++; if(weekday == 7) weekday = 0; } return weekday; } . Unit 5 - Writing Classes - FRQ 2021 1a and 3a . 1A . public int scoreGuess(String guess) { int count = 0; for(int i = 0; i &lt; secret.length(); i++) { int j = i + guess.length(); if(j &lt;= secret.length() &amp;&amp; secret.substring(i, j).equals(guess)) count++; } return count * (guess.length() * guess.length()); } . 3A . public void addMembers(String[] names, int gradYear) { for(String name : names) memberList.add(new MemberInfo(name, gradYear, true)); } . Unit 6 - Array . Swap first and last. | Replace all even indexes with 0. | public class ArrayMethods { private int[] values; int i = 2; public void swapFirstLast() { int first = values.get(0); int last = values.get(values.size() - 1); values.set(0, last) values.set(values.get(values.size() - 1), first) } public void replaceEvenZero() { while (i &lt; values.get(values.size() - 1)); { values.set(i, 0); i = i + 2 } } } .",
            "url": "https://boply.github.io/fastpages/jupyter/week-8/2022/10/17/Presentation-HW.html",
            "relUrl": "/jupyter/week-8/2022/10/17/Presentation-HW.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Array List",
            "content": "import java.util.ArrayList; // importing the ArrayList Class class ShapesClass { public static void main( String args[] ) { ArrayList&lt;String&gt; shapes = new ArrayList&lt;String&gt;(); //create an ArrayList with string data type //Add a bunch of shapes to start off. shapes.add(&quot;square&quot;); shapes.add(&quot;triangle&quot;); shapes.add(&quot;hexagon&quot;); shapes.add(&quot;rhombus&quot;); shapes.add(&quot;octagon&quot;); shapes.add(&quot;rectangle&quot;); shapes.add(&quot;pentagon&quot;); //Print all the shapes System.out.println(&quot;Shapes in ArrayList:&quot;); System.out.println(shapes); // prints all elements of ArrayList shapes System.out.println(); //Get element at index 4 System.out.println(&quot;Element at index 4:&quot;); System.out.println(shapes.get(4)); // print element at index 4 System.out.println(); //Remove elements at 3 and 5 but have to remove 3 and 4 since removing 3 takes 5 down by 1. System.out.println(&quot;Remove elements at index 3 and 5:&quot;); shapes.remove(3); // removing element at index 3 shapes.remove(4); // removing element at index 5 since removing 3 moves the index down 1. System.out.println(shapes); // prints all elements of ArrayList shapes System.out.println(); //Set index 4 as &quot;circle&quot; System.out.println(&quot;Set index 4 as circle:&quot;); shapes.set(4,&quot;circle&quot;); // replaces element at index 4 with circle System.out.println(shapes); // prints all elements of ArrayList shapes System.out.println(); //Get the total number of elements in ArrayList System.out.println(&quot;Number of elements in ArrayList:&quot;); System.out.println(shapes.size()); // prints the number of elements in the ArrayList System.out.println(); //Add a second hexagon and get the index of the first one System.out.println(&quot;Add hexagon:&quot;); shapes.add(&quot;hexagon&quot;); // Adds hexagon System.out.println(shapes); // prints all elements of ArrayList shapes System.out.println(&quot;Get 1st hexagon index:&quot;); System.out.println(shapes.indexOf(&quot;hexagon&quot;)); System.out.println(); //Clear the ArrayList System.out.println(&quot;Clear ArrayList:&quot;); shapes.clear(); // removes all elements in the ArrayList System.out.println(shapes); // prints all elements of ArrayList shapes System.out.println(); } } ShapesClass.main(null); . Shapes in ArrayList: [square, triangle, hexagon, rhombus, octagon, rectangle, pentagon] Element at index 4: octagon Remove elements at index 3 and 5: [square, triangle, hexagon, octagon, pentagon] Set index 4 as circle: [square, triangle, hexagon, octagon, circle] Number of elements in ArrayList: 5 Add hexagon: [square, triangle, hexagon, octagon, circle, hexagon] Get 1st hexagon index: 2 Clear ArrayList: [] .",
            "url": "https://boply.github.io/fastpages/jupyter/week-7/2022/09/28/ArrayLists.html",
            "relUrl": "/jupyter/week-7/2022/09/28/ArrayLists.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Java Image Arrays",
            "content": "Mona Lisa and Pumpkin to Text (ASCII) . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/60.0) + 0.5); int height = (int) (this.height * (scale/160.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 230) { str = &quot; &quot;; } else if (g &gt;= 227) { str = &quot;`&quot;; } else if (g &gt;= 225) { str = &quot;.&quot;; } else if (g &gt;= 222) { str = &quot;&#39;&quot;; } else if (g &gt;= 220) { str = &quot;-&quot;; } else if (g &gt;= 217) { str = &quot;,&quot;; } else if (g &gt;= 215) { str = &quot;:&quot;; } else if (g &gt;= 212) { str = &quot; &quot;&quot;; } else if (g &gt;= 210) { str = &quot;~&quot;; } else if (g &gt;= 207) { str = &quot;^&quot;; } else if (g &gt;= 204) { str = &quot;;&quot;; } else if (g &gt;= 202) { str = &quot;!&quot;; } else if (g &gt;= 200) { str = &quot;_&quot;; } else if (g &gt;= 197) { str = &quot;*&quot;; } else if (g &gt;= 195) { str = &quot;/&quot;; } else if (g &gt;= 192) { str = &quot;(&quot;; } else if (g &gt;= 190) { str = &quot;r&quot;; } else if (g &gt;= 188) { str = &quot;)&quot;; } else if (g &gt;= 186) { str = &quot;|&quot;; } else if (g &gt;= 183) { str = &quot;+&quot;; } else if (g &gt;= 181) { str = &quot;&gt;&quot;; } else if (g &gt;= 178) { str = &quot;&lt;&quot;; } else if (g &gt;= 175) { str = &quot;]&quot;; } else if (g &gt;= 172) { str = &quot;[&quot;; } else if (g &gt;= 170) { str = &quot;l&quot;; } else if (g &gt;= 168) { str = &quot;L&quot;; } else if (g &gt;= 165) { str = &quot;Y&quot;; } else if (g &gt;= 163) { str = &quot;j&quot;; } else if (g &gt;= 160) { str = &quot;=&quot;; } else if (g &gt;= 158) { str = &quot;c&quot;; } else if (g &gt;= 155) { str = &quot;7&quot;; } else if (g &gt;= 152) { str = &quot;1&quot;; } else if (g &gt;= 150) { str = &quot;i&quot;; } else if (g &gt;= 148) { str = &quot;T&quot;; } else if (g &gt;= 146) { str = &quot;J&quot;; } else if (g &gt;= 144) { str = &quot;t&quot;; } else if (g &gt;= 142) { str = &quot;}&quot;; } else if (g &gt;= 140) { str = &quot;n&quot;; } else if (g &gt;= 137) { str = &quot;f&quot;; } else if (g &gt;= 135) { str = &quot;x&quot;; } else if (g &gt;= 133) { str = &quot;{&quot;; } else if (g &gt;= 130) { str = &quot;u&quot;; } else if (g &gt;= 128) { str = &quot;C&quot;; } else if (g &gt;= 126) { str = &quot;s&quot;; } else if (g &gt;= 123) { str = &quot;z&quot;; } else if (g &gt;= 120) { str = &quot;y&quot;; } else if (g &gt;= 118) { str = &quot;V&quot;; } else if (g &gt;= 116) { str = &quot;F&quot;; } else if (g &gt;= 114) { str = &quot;h&quot;; } else if (g &gt;= 112) { str = &quot;o&quot;; } else if (g &gt;= 110) { str = &quot;w&quot;; } else if (g &gt;= 107) { str = &quot;k&quot;; } else if (g &gt;= 105) { str = &quot;%&quot;; } else if (g &gt;= 102) { str = &quot;U&quot;; } else if (g &gt;= 100) { str = &quot;4&quot;; } else if (g &gt;= 97) { str = &quot;X&quot;; } else if (g &gt;= 95) { str = &quot;3&quot;; } else if (g &gt;= 92) { str = &quot;S&quot;; } else if (g &gt;= 90) { str = &quot;P&quot;; } else if (g &gt;= 88) { str = &quot;K&quot;; } else if (g &gt;= 86) { str = &quot;e&quot;; } else if (g &gt;= 84) { str = &quot;Z&quot;; } else if (g &gt;= 82) { str = &quot;G&quot;; } else if (g &gt;= 80) { str = &quot;H&quot;; } else if (g &gt;= 77) { str = &quot;A&quot;; } else if (g &gt;= 75) { str = &quot;5&quot;; } else if (g &gt;= 73) { str = &quot;O&quot;; } else if (g &gt;= 71) { str = &quot;D&quot;; } else if (g &gt;= 68) { str = &quot;$&quot;; } else if (g &gt;= 66) { str = &quot;d&quot;; } else if (g &gt;= 74) { str = &quot;0&quot;; } else if (g &gt;= 62) { str = &quot;E&quot;; } else if (g &gt;= 60) { str = &quot;Q&quot;; } else if (g &gt;= 58) { str = &quot;R&quot;; } else if (g &gt;= 56) { str = &quot;9&quot;; } else if (g &gt;= 54) { str = &quot;&amp;&quot;; } else if (g &gt;= 52) { str = &quot;6&quot;; } else if (g &gt;= 50) { str = &quot;N&quot;; } else if (g &gt;= 48) { str = &quot;M&quot;; } else if (g &gt;= 46) { str = &quot;W&quot;; } else if (g &gt;= 44) { str = &quot;B&quot;; } else if (g &gt;= 42) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 58149 214x85 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10416 166x55 images/tmp/pumpkin.png . Print .txt File . try (BufferedReader br = new BufferedReader(new FileReader(&quot;images/tmp/MonaLisa.txt&quot;))) { String line; while ((line = br.readLine()) != null) { System.out.println(line); } System.out.println(); } try (BufferedReader br = new BufferedReader(new FileReader(&quot;images/tmp/Pumpkin.txt&quot;))) { String line; while ((line = br.readLine()) != null) { System.out.println(line); } } . &#39;:&#39;&#34;,&#39;&#39;&#34;::~~;~&#39;&#39;^&#39;-,&#34;~!--,&#34;`:;-,&#34;-;!*+4{y$AAG5AHGAGZSPSeGzh%4X%%%FVFhyzVzssfu}T=}}&gt;i+=Y=]TnJiiu{t}ykyCsh%VwUX%4w3XkSSZo3Z5OOAGAGOSe5ZADDDZDOO$DAdAEE$EREWE9Q&amp;MD@NEdA$$6B&amp;@W@@B@#&amp;#R@@@@@@6DNWd@M&amp;MBN@@6#M@9@@@M#APtl[| &#34;&#34;:_;^^,~,&#39;,^,,-`,`&#39;^~,&#34;&#39;,^-,!--&#34;^^/ffzHA5PSSXGeHG3GKPPX%yVo%yVVzCxCTT]][+&gt;+&gt;|)YlL_1*&lt;|((&gt;(&lt;;[&gt;[[YjnY1i=7j=jT7innnnuszkkeKKO$G$5OAA$OH5A5HDDGARHdOAEANQENd9W6@R@6&amp;HdD$$E@@W###@@&amp;@W@@RQB#W6@WD@B@@#M6N@@#N9@@@@#&amp;9MAuj ;~&#34;_,,&#34;,,:&#39;,&#39;:&#39;&#39;&#39;-&#39;:&#34;~&#39;-&#34;-,,,&#34;&#39;,!*]yuUe4X334PXKPXKXX%VVustjL7c]&lt;&lt;Y(+&lt;(*;(~|&#34;;*:;[;+^|^/&#39;(&#34;(/+&gt;|+(|)Yr+&gt;+=]]j1LjT=ccc11c1Vzyk34FSeeKodPGHZDOOAEAeE5AEORdE&amp;OEEDRZM&amp;M9$&amp;9M@6WWW#6NWM@9#@&amp;ME@Q@@@BN@@NBBWW@@@#Q$@@#@A@QM#G !:,:,,,&#39;:.&#39;&#39;&#39;.`&#39;`,`-,~&#39;&#39;&#39;`&#34;-::,&#34;r1hUPSk4e3PKG5Z4oytTYYYY]&gt;rLr;/(;*;r&#39;r^-_:&#34;_;:_.&gt;__!:|&#34;&#34;`&lt;:_r);Y;r;cr&lt;)|Y*)&lt;i&lt;&lt;=YjlY7=cJ{nffVz%okXPKOP5AS55KAD$$5$$d5OA56K9NEDEMe&amp;dMM@6B@&amp;@@B&amp;#NM6#W@@MWMM@@@@&amp;B@@B&amp;B#@#BB@6W6@@E@@@@W &#34;,&#39;,-&#39;&#39;`&#34; ` &#39;, ~``-:``..&#39;^&#34;*;_(wkeSUKKKGPPPwsi717Y[Y]&gt;*&gt;^;&#34;,r&#39;;*-*&#34;-!&#39;*&#34;,*:&#34;(~:`&#34;&#34;^!*)_/(!^/]:&gt;(/!(l(];[r]+77|T[c7=1j[7T=t=iyhwy%Xh5XZZSKHZeZ$$GAP$ODRdRGQ$$HQR&amp;6RQ$B6M@NW&amp;N@W@R6BNEwP@Q@#W#@R@B@@@@N@@QBBN@@B@Q@@@@@ ,-.&#39;&#34;.&#39;`-. -&#39;~&#39;&#39;^.&#39;::&#39;:-:&#34;:)(&#34;ixGeGO555GPUhun}c17=Lr|]*^L*&lt;&lt;^=_(;!*&lt;~&#34;&#34;[&#34;^&#39;&#39;`.;:&#39; ] `. &#39;| _ &lt; ~_*_,&#34;&gt;(;(r&lt;(&lt;*T*=&lt;t+l7]Yt}j}TtfzsCh%SSXSX45ZSXPPS4EZRG55DES@RMHM&amp;E&amp;9&amp;dNB#@R@NWNR#M@@@@6@BM@MB#@R@MQN@@$@#6WBM@MWB6M@@@B `.&#39;.&#39;`.`&#39; ``-!&#39; .::&#34;`*,&#34;_;!]k43XXHHGPPSku{t7L==cJLiii=!1-;~&#39;;* ,&#39; ,&#34; .(` &#39;`` &#34;-: ~:&#39;`. * / :,`:~/&#39;&#39;,(&#39;;,+!*;l~&lt;&gt;Y^&gt;r|]T]&lt;=i}TxJ{sFuVzwkS3SKXXeZG5G$Od$OQDdEdA&amp;&amp;56E$NQORW9#669#@#B&amp;W@N@6RN#BW69d@NNB@A@W@@&amp;9#@@WR@@@@M .``&#39;. ` ,-&#39;^&#39;``:&#39;* _^;*rjzkXXHSeA3FFuCuCTTf1[&lt;j*]r*).] ,, ^ | .`` - . ` ^.( *: : &#34; ( `/,:&#39;:(&#39;; r&#34;;!(:|*r^**_r(+&gt;&lt;Y[7=fJtxzsyuVokokkkSe3UZKG$Ed5EeEEPZQ9&amp;956Q&amp;Q&amp;&amp;WRM&amp;@B@@M@@WB@E@9@&amp;N#H@BB9NDN@RW@AEW@@Z@@NB@ &#39; `,. ` ` ` ..-,r,(^r&gt;tU3ZGUeSPGP4Usu==Y&gt;&lt;Y+(]:_:/ ! . ` -&#39;. ; ,. * ^ &#39; ` `&#39;-~ : ,, &#34; ; ., :;,~&gt;:r~*&#34;r_*-(_()|&lt;+|[L=Jf}7}}JsV4y4FFk3UOP3PXAAHGAROEQEDE5$R$N6RBNM6@@BM@@@@B#W#@@@@WWN#9M@@@@dB@&amp;@@WN#@@A@@@@@ &#39; &#39;`, &#39; .&#39;,-.&#39;&#39;&#39;~^&#34;_;++To3HO4KdDDeZXyzi1cY+](|);)^^:-&#39;_, . -- ,-, ^ -` ; ` &#39; - _`` &#39;` ; ;`-- !`.^ ^!&#34;,^&#34;:r!^!*;)(r)])]]YL7=7TixsykCyX4kyk4GeeKAAeEDdE65dGQQ&amp;B6MMQ@MNN#W@@@@@@@@@#@#@@@@@6W@#@@@#@@M@M@@@@@$@@@@@ `.`.&#39;...,&#39;--`...,&#39;^^(*iTwPUAd9EAePXysxTc=Ylr&lt;/r*!/ : ~ --&#39;~ ! ~ ,. `^ &#34;- &#34; &#34;&#39; ; : -..: ^ :`:&#34;&#34;,]-;&#34;|^[&#34;**/);)(++l&gt;LY7cT1CfzsuFwVCwX4KKX3eP5KO$QEEAdDdQ9EN&amp;QE@MM@@BM@B#B@@@@#@#@W@@&amp;@@W@Q@#WBN@@@B@@R@@@WW . &#39;` : ``&#39;.--&#39;&#39;,&#39;^&#34;|]jxe9MDd$A$dKeX%xJ7Y&lt;&lt;)]*+;^&#34;!!&#39; . *.&#39; ~ .^ `, ^ .&#34;` * .^ ) `~ ! ! &#39; - ! , ,`&#34;,;&#34;.^,|*;;;r/;r*r|&lt;L&lt;YL=cJT}uzyyVzowUX44GUZZHXE5dDdDED$$E5NE6BW@@WBNM#@@WW@B#WW$6@@@@@@@@@#W@@@MM@@BB#@W@@@ .. - `&#39;&#39;`,.~_;/[YPQE$eQOE$QKUFFsfnnj]Y&gt;[|(!!(,^. ^ ,..` ~ ~ L / ;:, , ; &#39;`!. ^ ^` &#34;&#39; ``-,`&#39;~ `^.,,^;!^;_,~_((+)]&gt;]]=7Tif{VywhyhoU4S%K4eSAwGZDGO5$EdD9ONMQEQ&amp;W@BR6N6W#B6@W&amp;W@#W#@#W@@@#@B#@ME#NB@d@@6@@@ `` ` &#39;,,,&#39;--&#34;;_7wSPdAAdDHG$H44hu{1=}7lYl+|^*,&#34;&#34;&#39;&#39; ` *`- . ! l ; ;-` , ( ` : ( &#39;`` `&#39;`-`&#34;- ,`&#34;`&#39;`^,,&#34;_,;^!*_(((r&lt;|[&lt;L==finuVFF4oyswk3w3kPUSFSPAHHGUHdd$d$EREd&amp;9&amp;#d@E@Z6MNRNM@W9M@#@B#@@@&amp;B@#M9@@@M9@@B@P@ ` `~ ``..&#39;,:,tzkyx$O$HZDE5RUXXsuf1}]Y+L/])(|,,,&#39;,&#39;``, ` ` ! &#39;, ^` ( ; ,:` ! . . `. ; ..`;~`_&#39;~&#39;&#34;-&#34;^&#34;;!&#34;*&#34;;!r/((r)L&lt;l&gt;j1T7TiVT{hzoy%U%kF%4SPUHPDKHGZD$OEODEEEDM&amp;&amp;$#BQ6&amp;&amp;9@&amp;QH9@BBMMMM#MBRME6#M@@@@@D@@@M&amp;@ ` `` r[ixx7Ck%$Q5OOE9QSPUVuT1=LY&lt;&gt;&lt;|(]_*&#34;^:-&#39; , .&#39; ! _ &#39;&#39;.+ ^` !-&#39;^:.&#34; `~ ` , _,, _ .~:&#39;&#39;:,`&#39;&#34;/~!,_,&#34;!^&lt;!/((Y&lt;lc]lcci7n1T}zxysyFFS3oXFeUVkk3OeZ%KKAHOEE$EDd9M$R9$dBNEQ@$&amp;#6R&amp;R6NBW#W&amp;NE&amp;6WR@##@@#@@@@@ ` &#39;.,`&#39;.&#34;f71lcnffwA5&amp;EAWGQESG3Vuy}7=[[r](*(^*&#34;!&#34;`: `` ``-_. &lt; ` ] ),- L (,&#39;) ` &#34; ^; `^&#39;&#39;`&#34; `;`&#39;`:&#39;,&#39;~/;^~^r!_;+|&gt;&lt;&lt;71&gt;=L==1==ftnntns}zfho4owsP%XUKw4XDoZHADEdOO9Ad&amp;M9D&amp;Q9#MM#@NQ@N@@@$6@@##NM&amp;RB#N##B@@N@@@B@ ` ` -[{=lcT1JVFhO9E$@&amp;$$dZU3kzC}TLl&gt;+&gt;r+|(*;(_-, `--,, *_`. _.^:&#39;Y&#39;:*^~:+`&#39;;`) . ~ .^.^~./-&#34;`;,:--&#39;,~,:,+!+*^&lt;!&lt;/&gt;i++&gt;[i&gt;Y[lTllc1iYfsVfnosyozzVu3yKk4X4SeoZeeGOAAEdD5$E6WMM&amp;M@N&amp;@&amp;Q@&amp;@@N@$@&amp;B@&amp;@&amp;@B#@@#@@@@@@@#@ `&#39; `+JxuJc=Ju}oPeA$WDRRE$HGSh3kzCfi=l+(&gt;+^!-/.(` &#34; ~^^&#34;+&#34;&#39;&#39;_,&#34;`.,/ |&#34;_ &#39;&#39;^;- !;: ! &#39;`! !. *.&#34;`~.:`&#34;~&#34;^;/^)~*/~[l(()jY+[[cLLL[1|=Y7c71}ntznuzFn{VCwzkkFUkkkXUeUXA4Zee$dRQQMWNW9MEM@MB@d@@@&amp;@W@@WWBM@##M@M@@@@@@@@@ `&#39;., -Yz[]]11swUSS3GSOEPO5ODZ5hVoxFxij]l(/|!*^~&#34;~^--&#39; `:`,;./,&#39;`&#34; -/ &#39;-r.:./ .;_ )`*&#39;., &#39;,~ -. &#34; &#39;&#39;: ^ :^-,,*&#34;;&#34;+(_]/&gt;((&gt;](&gt;]Y]+c&gt;)&gt;]Yc77LT77xCcuuuissuzwzCVFznkswko%UUKPGARNR$K@&amp;RWM9NNEME@MW@R@N#B@RM#QM@6BWM#@@@N@@ `,:~=TT=Y=1kZ5GHGAEKZRG$GG$3VFCunJf1]i=r]*_~!!;.&#39;!~ ~ - &gt;`^_ (&#34;,-,; ;^&#39;`-;&#39;,`( / (&#39;`;` , ` &#39;`&#34;,-`&#34;&#34;``/&#34;~r(_;&lt;!(_)_]/=!j)[)cr=&lt;(1[]cltJi=]c1YtT{n1uJxTu{xCyfxz%yyw%oS3A5HHE6R@6@BBW#N96Q6N@MR@E@#@@MM&amp;##BN@M@@@M@6@ . ~is/Jfi[seeGkEH3PGDEASH$DQHUCCu17fY7j]|/**~;&#34;-*&#34;;~&#39;! ^ (&#39; ,|`* &#34;.~,`( &#39;,:: ^`;.,&#34;^,-:.`&#34;- , &#34;^^ ; -~` ~^,:)--^r/&#34;r_|&lt;()j++|]=&lt;(|]/T]c|Y7jc]TLi7JiT7=tJt}C{ufTfzsCzVwXKHA$D699@&amp;@@Q9@N&amp;E6d#E6R@#@@RW@eE@W@NWN@M@@@&amp;@ ~.{711}7Y1SG3EGPeOPSKZOHDSA9S%zytt77]7=r)&gt;&#34;&#34;+,^&#39;l ::&#34;;:,&#34;+,:&#39;^r :&#34; :&#34; - ~&#34; ,&#39;-; .`,^,&#39;`^` ^ --&#34;` &#34;.`, +:,^_~!^|_&#39;*~`|;|j(_|)[/&gt;*[++&gt;&lt;+()]Y(=[&lt;7l7lLtjcJ7s=tttnxuyy4kkXH$DK5Q&amp;WRNW@d&amp;QB$QE@QQM6Q@#E@@&amp;N@MERDNER@@@@W -==1icJ173$yR5ZHdZ%GD$$O$AQDUhozu]LYL[=&lt;[&lt;/|!/^~;/^~./,~&#34;&lt;^., [ ,.], &#34;~&#39;, ^,^&#34; `&#39;: &#39; .! ( ,^` (``).:-[,^&#34;Y&#34;&#34;&gt;^)(&gt;~^]:*|^!1~^);*[(l&lt;||+)=([+&lt;)Y*1[jY]1LicjJi}uxsywVS3XAQZ9$dR6E#W@&amp;@6QBE@WQN@D@@#@#N#@@@M9&amp;O@6#@B@ ;Yc[j[}JudzMAPXKkZX$5ZQ$dARDU%yfJ[Y[&lt;c+*]~_:!&#39;:;&#39;]&#34;:[&#34;^|!/+~^:&gt; :&lt; *:&#34; ,`*`&#39;- ~&#34;. ^` -` r &#39; &#39;` * * `~/&#39;&#39;]-_,|,:^!~~/,!-&lt;-&gt;!(/(_*|]_)&lt;&gt;]&lt;)&lt;Y*|()r)|&gt;&gt;Y[&lt;=]ci=cTtJnuCVoUSZEHSd5EE6dWBMK&amp;M&amp;&amp;HB@Q@@5@@@A#@WE@#MMEBQBWNN@ urLjYJJ7ASedOXAZAKKDddkEZA6D3%s7xtnL1+](&lt;+^^*:r;;_&#34;!;;-;&#39;.+&#39;-&#34;!&#39;/ -`] * .-/`,:&#39;^ &#39;,&#39;, ( ^.^ -:-;. /,~,/--r,;;&#34;!,~~:,,,~~:^*~^;(&#34;r!)r||/&lt;+&gt;r[)+r((/L+=l)]=[=7lY1JiC{{hh3P3e5P55ddRAEQ6O69W&amp;DNMQ@QEEWB6R@9E&amp;#@MNRHW6#6W x]cl=xTnDePOZXHZ5S4XeAZeSO&amp;DoVx1fc]&gt;l&lt;r!/&#34;^~.:&#34;&#34;&#39;&#39;--`;~,&#34;.&#34;:!&#39;`/ :-`*`&#34;,.-(&#39;&#39;,, &#39; ;.--`&#34;,&#39;`^.&#39;&#34;&#39;~&#39;-,*^!*r*_|/r_)*r&lt;+!**/**;))(r//*!;+_r+L(L|]&lt;L)7)]&gt;[Y7=7==7icin}txCzVoPAeGAAD$Q99RE9@eM9$WGR&amp;#M9$6WWGMNWBN&amp;@B#9&amp;B6R9B 7&lt;T]sTLJw$3eHZHeHhN3SddFZHR$%VC17Y=*r&gt;+*!~^^.-:~&#34;;^^~_;!(_^)&#34;;*~&#34;,,!.&#39;&#39;!,-,`&#34;,;`.&#39;&#34;&#39;-. &#34; .:.:^^!^_*|(&lt;+[+&gt;j7Y&gt;l[|[+|&lt;&gt;&gt;r|)](r/rr))/|(r*[&gt;[]&lt;+[+[&lt;&gt;lT[L1c77}711Tu{CfhkkXZGOA5GD&amp;9ERDN9$BS9&amp;OERR6B5R&amp;EB&amp;N@NME#@WM9$@R@5 n&lt;}fcxi{J4AOHGdAAz33HGEhOPOd%fxsT1j)rr+(Y;^&#34;-,*_^*((;_();(rr;]!*::;)~&#34;,^`)-,^&#34;^&#39;`_&#39;,&#39;-. -`--&#34;;*(]/&gt;|LLl[ccT7ijY&lt;Y[7YY[[|[/[&lt;+&lt;+&gt;]&gt;)&gt;+[+[]&gt;Ll[[Y7c=&lt;it1cxfu7Cnn}youykoyFkSGGA$5OE69EOBE9WK$QAE$NQ$QD@dR$EE&amp;$MNM&amp;@MGNAW9 ciCnnffuzUGdKSHOAdE54NZ343OPSXhi7[+];/r^!&#34;~&#34;(~|/|([&lt;&gt;&lt;[)l][+|l+(+_&gt;;;!:^:*^-!r^&#34;,::`:.`&#34;~^;!&gt;[YlJYTYffJn{t}fuxt1JTi7i==L=jJ17=Y7c==1Y177u=1f1YiziuJxx}uuxzssyu}zkVwkk%33PHP$$D6&amp;R&amp;@@Q@E6EMERDOMA@N9REMWR99R6QWNNMAM$5d llnfskfoyhoUO5$QP5A$zHK3ZePS%%y1i]]&lt;]&gt;*/|/&gt;+]+&lt;++[l[jj]jicc=}cTYcj]((!;&#34;^-;,&#34;]~~*~^,^&#34;&#34;&gt;~_(/+71ttt{tsuuFzyzusyz{CnutCxf}JuffuxxsCnfu}Cntff}Ctu}yuysz%uC%VoVwszohVwy%%UPXGZ3XGDDE$96WONRA&amp;NH&amp;NK@X@D$EWZ6Q$$EQW56#QdBMG6 nfCxyxFUFU4KRDGkSEDeVPXSPXHK4ustVJjY7Y|1[][=L=jj7fnffxTzuxzxnJu1{T1[L&lt;(*/!+^+;!~|,*!*_*]((&lt;]==nfssVsozVhhwhozzzCskkyyyVuCzksookk3U%wo4wkyFzk4ks%FkkX%SyX4%%UyPsUo%wsXUUk3SHKeeD&amp;d$BE6$dX9R9RE%BdWR&amp;9W3M6Q&amp;dE9M$@5ddNR6 oJJt{{k%4hz4XS93e$D4wAXSSSS4ShVhFtyJu}JxJfftzzy{XFusCCT{{}FxyfhzuC{n1TY1(**!;(&#34;(!_)/|*)[|]=cJCuhVykoUUS3X4%okzkC1iiY]++(]&gt;l&lt;l=77fJzuyKe3GHHKUH%KASASKHSZeGUPUSnXkk4%USSKSPee5DEQ$Q$NBNQ&amp;W9RDBQH9696RN6B&amp;dN$BMRG@B#9EWW }fTfxuyX%hkwS4KKXSA%OC3%%3UPU%suXxzso{ChhXFCi[]+()|/);!_|&lt;]+)]jYitunsyTi](!)^&lt;^+^rr_/+r([L=JsuszXhyXUkXkhsz{tj[[r|]|+Y=[j[1tTJTfxzTttuhso4ZGSA3A3PkSZHGZSXZe%why%z{yFoUkUkPkKXHHOOEdE6AA&amp;MO#Z6AO$EEPQDQXdRRdQ6SM&amp;WO&amp;RQ wfJVVuKCVhPCXwSHKUHGo%UPGK%3eFuu{Vhhkuh%%x71Y=1TfuzXS%y4SX44okFTJ1jt}xt}c[/+*;;*^//;/|&lt;&lt;LtixCoCokS4%hz%uxTTc[cY7nuzkU3A%ZSHGG%PekeK3VFwVskUU%UzHSKXKXGSUKShhyVz1u}Cszoswz%KUXKZHGDDd&amp;&amp;9NMRdREOdkBHd5EAQRAQEA$ENMNRd&amp;d@ yxyuxUXVwC4OA5ZPX5ePUTSGeU4%PUuzntkVVyVVf}uFFoFsxfitF%kXXeX3yAoSeXzf7TiJxiT)l;*&#39;&#34;*&#34;;!+|)LC}hoyfJJS4wuJu1n}if{fCTncLY&lt;J%3kSAZKZKZV4XXUkUKXX%4UHu3UP3sHo%{Uzs}T1J=71tfT{uou4h%3KZKHOEAERQdEODeEZO5OEAEEDHRH#dE&amp;RSd6EOW6&amp; zyuVFG%SG5UPKD3P$U5K$nZPPXe3PFC{{i}F{uFkkCkyJj]+&lt;+[LuA%SFPXeP4khzXy4yxY&gt;i{j+]~:&#34;;*&#34;&#34;_(&lt;&gt;7uyzk4ufz%hf=c{uT}1=])!^**/;)=sK4hkeUKPFzkeokwz%CVwFoF%w%Fz}t}}7ii1=][&lt;]ljc7iCx{zFUk3Z53Z$5ON&amp;$EQ5DNK&amp;E$M5QR$QQE$R5W#WH&amp;W9Ed@M &lt;}VuzX3e5OZKOQGDXeeHdG4KkZ3PSwiY&lt;Ylj+TlJTL+]=|)_(_(&lt;+nFS4oVhz{CFkut77Y[;&lt;T+&lt;/ --&#39;:~!+lYJfzJyzzz}xnLiL&lt;j+&lt;^!^&#34;&#39;_;&lt;;&gt;)rizsuhuzfCns}tJ77iTj1}fic[&gt;|)](&gt;)+L/(])+)r&gt;jji1CfzCzhw%XSPHODRdEQ6W$&amp;E5EDP$HEEBsO6WN$9d#M&amp;dO@3@B TwkxK3UKGOG4PXeKUeO$EEw5KePAwCti=(l()]7LJ&gt;(r);(-:~,^,(&#34;^(*r+]Y=jc+]&gt;)]|+]]r&lt;(.&#39;-&#34;`,:~/&gt;+c7jfiuJiJujx=ll+&gt;;[)**_~//((!/^/r*+&gt;+&gt;j&lt;=]Ll[[LlcYj7Y=Y&lt;]l&lt;&gt;+|+)+;/)r(|[&lt;Y[=nfffzyhXX3SeEHDE99Q&amp;Q9dH$E&amp;ZS&amp;R$#GEEA@QWD9N@BEMH6R osz3P4GAkEkEX5Z$dQEeDDZAHe5GSuc1J++])+&lt;7Y+_((|;^|_!**+/[&lt;TL7JTf=cLL|&gt;7&lt;)||_*;&#39;^`:,-:^*[Y1finfyJ}TyYni11]|)c[[++r|r)&gt;r)|r&lt;|+]&lt;&gt;1[lYc7=jc1J=t=Y[YYL&lt;&lt;&lt;r;)))^*_&gt;)/ll[j=n}nzfowXX4HDGA$Ed&amp;9N659EENRO6Q#3@$ORG@6BP@E&amp;6d@&amp;6B tsssGKOHe$Z5UdGNOO5$Q5$KEOeDPfY(=lr&lt;(j[+(*r/]&gt;l/L+1=7ijizyxzzt7j]][|*]~]rr(^(&#34;~:&#39;&#34;^~!+||ift{}uty=ncCTYc])rl)l])+l&lt;[Y]]+LYj[=l][lj1xu=i77T+[rY/[;&lt;(*^__*(**_r+r+L[]L1JJszoPXSSh5ARGE&amp;6M6R6DWR&amp;ORQE@@eBNESE$6$&amp;6Z@9&amp;9$@W iVy{$ZH$PeHNAZSQDEHOB&amp;eAd5ADZt77&gt;r)r**|;(;^~(!;_)))&lt;&gt;]Y==]]L+L+&gt;|(;~^;^&gt;&#34;//*)]r^^~&#34;;^)|l7n=ntJ1uji&lt;CjY7&lt;+*|_^[!L++)L&lt;lc+]=&gt;[L[YL]&lt;l+((*_~!&#34;_*___^~/**!+;__||]&gt;l77YTJJuywzU4X5AH9DE9RW&amp;d$W$KeMR@4@5@dZ@U6@A@DB$DNWdME#W txsn3GX5OSDD$GSRQ$EQ&amp;9$E9dDESn7j(&lt;l^(;/;^&#34;(~:;&#34;-,&#34;-,,:^)+(|+&#34;+!/_:&#34;&#34;r^_r/(*(&lt;) ~r&#34;_;(r+iji=TTJjnj{]V+)++/;!^*^(*~,^**!!),--:;~:&#39;~ ..&#39;;,:&#34;!,~^!^^_,;!*+|[+|[+[&lt;jL=L7{tysykSSeHGZ$NNN&amp;N9MM@@@e@#9$@EM@F@9K#RQEW$dWN@@S@@ yuJyyPHOd&amp;DE5&amp;PEDG$DMdDR$E5Q%s1[&gt;/[^_^&#39;+^:&#39;,~,^&#39;::-, -&#39;+&#34;&#34;&#34;^ !.~**^&#34;+^+__&lt;^*[/*`*:~//rrll|c+[=l7l[lf&gt;((&lt;((~^,:~,`,;:;. `&#34; -`-:,&#39;. ._:^,.*~&#34;-;&#34;^/*_)+]&gt;&gt;|&lt;)&gt;[Y=TY7itCfoVzXKXK3E5Q&amp;NQNMd&amp;$6@d@SNWZ9@KBQdNk#Z@$W#@A#W@KQ@ kVJCXkARE&amp;d6GDEAQ56ERdEEP$OD3y1Y&gt;/&gt;(/!~[&#39;^,(,-.;&#39;,`-~, .r.-;.^~,;~,&#34;^|_&#34;~+&#39;&#34;:;&lt;~,&#39;*((*+L[&lt;]L&lt;]]7[]+&gt;l&lt;r[|_:(.^,,&#39;&#39;&#34;*&#34;- ! &#39; ., , .;;:` ,_,&#34;^_&#34;;**+&lt;&gt;&gt;&gt;[]&lt;=YY=iT1ttCxwV%3%AKSAD$QQNM@EMM5@##ORZ@S@@EWN#A#Z@#ZN9d6M6@SD kz}FhGCEA99EQE5E9EN$R9O9#&amp;$4$znjl][)[r+/|--&#34;^&#39;&#39;-_*~-;&#39;&#34; +;,^&#34;,* &#39;(&#39;,,;,:,^-~:&#34;_: ,)*_(=*+r+[Y&lt;=][[&lt;+&lt;+)=!;&#34;*-^,,, &#34;&#39;(&#39;&#34;&#39;/&#34; ` , &#34; !&#34;&#34;,&#39;~~:^^!*(|r)++][&lt;=&lt;YLlnTctfzyohV53P3H5DEN&amp;&amp;&amp;B&amp;#&amp;@N$ME@BA@$W@NMRE@RE&amp;R6Z@E@H&amp;9&amp;S {yVuosyD$6$GQ&amp;$E5MRQQ9&amp;9E9&amp;EHoxJ[c]&lt;L++&gt;/)|);;^&#34;(;&#39;&#39;; &lt;`~: &#39;,&#39;~/&#39;:*^,;,:`~._ &#39;-&#34;;!r&lt;+*+*[L&lt;++[&lt;)*[)r|!;,(-,&#34;&#39;.,,&#39;`&gt; &#39; +``&#39;: :^*,^&#39;,,&#34;!&#39;r&#34;:(*)+[|[L&lt;&lt;LjljcYTfJfCzVkUX%GHDdd5N$9NBWN99W@4@EB$#M9AN6DWAd&amp;Z@GEWE3#&amp;99EZ z1zy%dDPKdE%D&amp;APeBERQE$N9$WQAyFJ1+c)&gt;)+r,[&#34;*!-:^&#39;`&#39; _,, ; &#34;.&#34;^^&#34;-(:|-:;`_ `,`` &#39;`,,__](*l[+1r(Yr&gt;&lt;+(|_&lt;(&#34;&#34;^^:&#34;!!&#34;/:&#39;,^_: / :&#39;.,;!^^&#34;&#34;~&#39;&#34;^:*(&lt;|&lt;&lt;]LY[jjYY1TTnT{FyhkU34HHHKE$&amp;9&amp;RREW9W#ZO@kEMQM@4MEGQ@XDO#ZB$MMd9dE4@ VCUP3V9A$OEKe5eO5#D$DG&amp;dE&amp;DdEeFC=1l&lt;+(()&#34;;&#34;_,!~]&#34;,&#39;`:;:&#39;;&#39; --&#39;-,;.&#39;_, ` ( . , :!&#34;^/*;*Yc|+&lt;L]7L&lt;~&lt;|+)^*&#39;,,&#34;~,,&#34;,l-&#34;,:*-`:- .&#39;:&#39;&#34;*&#34;,(,;!^~/!)(=+][[LY=Y7ucfff}{VxkFU4eeOEXE9&amp;66BD@d9@6$6$RO@@4@k$E@GQWS&amp;R4W6GZERBZ&amp;OD ehZeXZUHO$3REEROOE$$EX9$Q$O9EEX3T=+r(*&lt;~:~&#39;--&#39;&#39;.- r .;^`:/__./:`/,^^,&#34;*,,&#39; ,`&#39;~&#34;^&#34;]&#34;r]rLll=(s*[]/r~|(~*&#34;,!!*(&#34; ~`&#34;; )--&#39;! -.;-&#34;*~:*&#34;_~^&#34;!!_)(++[=Yj7cTxTs}JfohVyw%kGZDAEG&amp;696B4@MQE@EQ6MQABM&amp;MK@Q@QeA@@n#EeNAR$&amp;5@w $3KeoEV$$AkOD5DOEeAA33wS&amp;$WWE93Uf7=[&gt;_(^__-~&#34;;-*&#39;:`!,&#34;; +^^_&#39;:^.+-^~~,:,:&#34; ,_ ^-, !;*)^/|^=*7]rf(+l]+/*();;&#34;*&#34;!],(/.r&#34;^;;(, &#34; .;&#34;r,^-*^:;~;*_(&gt;|&lt;&lt;]jl=7=ixnoffVhhooFeSZAEDdE9&amp;DM&amp;R#Q@NBd6N9@PWWN5R#SQ@3B#SB&amp;&amp;ZRR$d@3#k D3KOUO$9DEk9$DK9OE$DN&amp;#HP#@6EDD3hyJY[&lt;r&#34;~;:~&#39;;;!!&#34;-,&#39;-&#34;-.:`~&#39;;&#34;~;;[;*~:`!_&#34; |&#34; ;,_ ;^j;l+[[)7+[n[=L7&lt;&gt;/L*:&gt;&#39;]_~(^:|~_)r&#34;*`(&#39;&#34;`&#34;*&#34;;___(^~^/*+||[r)=Y]j71=1zFxy{ohwk3PXA$eEEdR966B@K@B55@&amp;d@Q@E@EMK@e66$E9BBQ3@35BR9M3#H %3OdO4EAO&amp;S&amp;$RO5O$KM$$d9SDE@EEDHVzJYY&lt;|*;/^^:,*&#34;:&#34;:~&#34;,&#34;-,^-~&#34;^!:/-j/_*&#34;&#34;^; -&#39;-&#39;;.(~;)))/+]=LYj]1[j[7=1)*(&#39;&gt;&#39;&#34;[~^!&#34;(^,&#34;;^&#34;&#34;_&#39;.&#34;(:_(__(_!_*(rr&lt;&lt;[[[j=YiJiiuFVxsxhhoUUHSGAA5RQd&amp;NNWBMB@N4B@3N$Ee&amp;9@%@6WDBEQ6&amp;Mw6XER&amp;MR9Bz FEZ5e6oODRO$SOEQ&amp;&amp;ZDE$&amp;#&amp;&amp;NQQRAZXsy7=]j|r+!;;_:,&#39;,.&#39;.^&#39;&#34;;~~&#34;;(&#34;*/*]|*/:*-/&#39; .. *`~^~_l]+&lt;+]|]]+=+&gt;]jc=[|*-!,_&#39;] &#34;:(*^_*~&#34;&#39;,,~,(&#34;;;;|!*(r()/+)]l7L=771niC1ku{wyzVXkw3eA$$EQE6ENWB@M6NR$N9$#BWd@&amp;W@C@B@S6XZ6h&amp;E&amp;N&amp;EE&amp;deE EF9AZOkRRDOdAdDEOOQQR6E&amp;O9E&amp;D6HS5wu{1c1[+Y//^;;,&#39;,.,::~&#34;(^^&#34;!/!*/=|/)_&#39;/ -,,;&#39;&#34;&#39;;&#34;&#34;~|/*&gt;|jYl[Y|=+ll=1cf=&lt;,&#39;^,`);;^:;,~&#34;&gt;&#39;`&#34;.-:&#34;_!:rr|+&lt;)r|+]]]cj=J1xJttufyosCusU3%wS%G55DEE$5QR@6&amp;69$@N@Q@5MdEEG6DEW@e@4N@Z@eR9K&amp;&amp;EE&amp;$ Odw9DQoE&amp;GkAZOHEGEQ&amp;9d&amp;ONZQNO&amp;$$OwzsJf7Y&lt;]r/^*^~&#34;^&#34;&#34;^;^~r__^*;|()Y=L]r^~.:`~._-,!/)+[j1nJt}uTtin}Tn}uusJ=_,~-&#34;;,.-:*^:-^!&#34;;;_(;/!((&gt;(|]|c|l]Y=c=fTntfnfyuyhoukkU3oUhX$dA$ER9E9DNNRD&amp;BE@9OON9NwWSND9@6@XEWdEONRQ499&amp;@HB B9%MEQOk#K$QOAE6EE$6&amp;EQPdQ6E9WWOd5oyCn{cTY[|&gt;(*;^/;*!(*_(r(;)^*(|(iyfT&lt;(!*/_&#34;!_+l7}7uUwk3wX%4khwFFUk4F4Xt(^_&#39;&#39;`/&#39;~- !^^&#34;;~!!****&gt;r*r&gt;/&lt;+Y][7jT1J1}tnunVCVyoksXwSSCPUAdEDQRD&amp;N6M#6d@K@@ABEW@R&amp;R@@5#OW$@SGWKMDGE6PQQ6#w@ O5ydEAO$HRM%6QARMDd9ERSEo&amp;dQ6EEMWGS%kuVJfi[[&lt;+(*_//(&gt;(*(*!/;_^^/;/)]7fzzj+[|[[11fsku{hXAUAPUG4DzZxAeAsUzl[_!~^:~`&#39;,&#34;^&#34;*^***//rr/()(+&lt;&lt;&gt;llYLYiiT}7f{}fsyoP}UPwehSA%GAd4EAR$5R9E9@R#WMdN9$H#BAMMR9E6#$M&amp;$O@K6UN@RABNG@E@ SQUO$DAPeNBOE&amp;9QOD$$EEdMkNNE56B96RS%os{z17=[j&lt;++/&lt;(&lt;+|rr(/^*;^&#34;*,:_,-&#34;,)Yxyio1wfU4XPz3XeX33HwXZXeS4S4sun=[*^*&#34;&#34;^&#34;~^),+*(r;[(|r+|+l)+Y&lt;[T]=Y7JTtxTnnyuCyosxwk3UFPKXPS$KD5REQ99NDN&amp;#NE@BBHWMNH&amp;WMdW&amp;9@HDO5W$PNQzBBQ#P##$ B&amp;OkRREkdN6WR#5NEEeeD$55$Nd9$RWA6EO3%FFyufT=jL][&gt;j])]||]+r*)!^;:^~-^&#39;` ~&#34;/]7z}k4%ekGVK4H3S3Skw3UU4hyufJlY[(r**!!;;|rr|&gt;|r&lt;)(&lt;++&lt;&gt;&lt;&lt;]&lt;[LcL[1Y1t{t1JfytCshyThVXoXfZPPD$AERD9OE&amp;6&amp;dQW$6NE6M#@&amp;@@O@B$@AQBK@99DH59EB@$#A9B3 WDE43A6yR6NDBMEWQR6d&amp;RREe9WedNQGNdRAPo{zVyT7=7Yj==&gt;]LrL]&lt;r();*^;~!.:&#34;&#39;-~&#39;&#34;,^r+1Cy44Sw%oX4XkkfhV}uxYcYL[)&lt;(/r)(//)(&gt;]&gt;&lt;&gt;&lt;+][&lt;&lt;+[&lt;]|[]l[Yl=YT7i}{fu}{u}nuFszFu4s3h3UXAP$dEE69EE&amp;WBE6@M@BRMMMe@M$M@dOBd@X6M$&amp;R&amp;@U@B5#B@GQ 6$SO%9%PR$@u@WQAERD&amp;d9Ed$d$EFB$OMQEAHUVCuxT7Y=cjl=[[=[L]][&gt;r(__^;;^&#34;&#34;,;&#39;,^-^|&lt;YcnJxxff}Csu{x1}J11jY[Y]l)|][][&lt;&lt;&lt;|]l1Yj&lt;cY=&gt;j[lY+&gt;+&lt;[+[]LYjTYiufuiuxJuzCVCCC}Uwz%wZS3AeEEE&amp;EQR6M6E6Q&amp;@OB@@BE@RA@&amp;6Q&amp;M#e@RAGOdde&amp;Rw6$@U@ S3QGKHGSEEWC6ERSWEE$dO3$$OdOURQR9OA$D3kCC}1[7jL=j]l]7]1)&lt;&lt;+&gt;&lt;||+*;;;&#34;:::,:,///&gt;Y7Lc=j=j=i1i1=cT=1Y=[L]Y]LLY=[cj1j7fctJ7Tjj[[&gt;|&lt;+&lt;)++[[Y[L=1=1T1ffCsTxoyyhCh}Uono3SZHK5$ODQNQ99M&amp;BN#@EB9B#B@D@9BREO#WNE&amp;eNBPENQ@5@SEBON O$$Ez@&amp;X&amp;AN4M$EHRZEZD9OS$EMdADNDHA9REDHzyiTY7YllY+++&lt;J[Y[ll=7=cY&lt;r);!(_~!!*!!*!&lt;)&lt;|&lt;[&lt;=Y}iTiTc1=i7==11i11t}}sxsffxJtitYjjl|]|&gt;()l&lt;r/l)l]=LYT11TTJT{}zxyFU{oz4%%43U%5AAGAEEE&amp;E99&amp;W@WR6BM@$6NM5EEMRW6N9Q9WEQ$@K#5R@$MMA6 5GEeV$9XG$Mz95HU&amp;DKPHP3Z5RE6EC@BXRE$EOHkyf}[=LYL[]++[&gt;+jLjLjufzkffsnntijYLYl&lt;L)&lt;+&lt;=71cJ}xfCfxxuCCCuFyyhyywkUkkPG%Vf1[J&gt;l)[)r&lt;[)+]&lt;&lt;)[&gt;][c7ln117juxux{yyUhwToCosXwKeHA$d$NA9QNWMN9NDB&amp;@6WMR#$E$6EEDBRHM#5D9UM@5$6QQNR9M ODdOQzW3K5NyRREE999RDGK5Q6$MED3EN%NNE9H4UVsT7==LY&lt;[+&gt;rr&lt;=L77{1zuC{uzz{zkJCUfffJT7iJx}fyskyFCUFkzoXy%hu4y3VSKK%zCtT[Y&lt;lY&lt;](&lt;(+)&gt;|+&gt;=|&lt;&gt;L+1[==i7cufCuukhVzUwFz%UwGUGG$$EEQNOE9699@Q66W#@&amp;W@9@W@DM@E@@E@KMK&amp;6E$Q@@9@ZWRN&amp; ESAHGy$EeeEeQXHOAKEdEG$dDQ$3E9KDByNM5&amp;&amp;XUPzf}=jL]||&lt;|r))++r]&gt;][&gt;/(^,.;^&lt;*_[_[/+[71uCx}n1fixf{TiJnsCxuxuxJi1Y=L&lt;[L&lt;Y[[r=&lt;)/**(*r+/&gt;+&lt;&gt;]llTl=cCcixufuFsVVuzh}hyZ%ekZPG5EO6EAEA&amp;9E&amp;&amp;d&amp;QNO#999Q&amp;9O$MD&amp;EM@QP@SBAR$#ENEPEHW9 $Xd5HEs5AdMzEEDAAORNMD$HEENFBNk9EZON$&amp;ERP4KUVf7=[[]&lt;]/||);&gt;r+_(;-&#34;&#34; .*,_!;&#34;(,;~;;(|(+/!&gt;&gt;&lt;[=YYj=7177T1=T17j=[&gt;)[&lt;+j+c&lt;&gt;(&gt;|)_|/(&gt;(+l][lj1c711yY{CzfykwFwywkV%zAwXGHGAEdd&amp;$RR9RM&amp;R@&amp;66$AM6Nh@d@N$B&amp;$96G#e@HR$E@GNQH9@OEE zAP5eNC$AQyeA$AQAHRRN99&amp;RRMQA&amp;%AEOd&amp;E9$96EDPXwuJ7=Yl]&gt;&lt;)](+|//*~,,-:&#39;;;&#34;(+_r((r())[&lt;|&lt;|&lt;[[[==Lc==i17}Jx7=Ll[YY&lt;]Ll[&gt;r])]/|&gt;(]+&lt;&lt;&lt;l[]Y7Y11i7tsiyxyys4%oUk4ko3V53SKGOA$$ZdEQQE6REMWDWe$@&amp;WRH@EW65BM5NRZBdB$@UAN6&amp;$REB&amp;E@ oZXA3KXeODyD$3SD9D$EDMMDEQQNPN5MRMOEOWOE6R6&amp;SZUyuTiYl[7&gt;]&gt;|[&#34;)*_^;~!&#34;/_!&gt;(|]ljYcJtTtx}Jjfitnntuu1JfT}1}1J1jY77Yc77==jY&lt;Y)L&lt;&lt;Y&lt;]L]1=Y=JcJJJfxzxyyukVkyXwkSPy3hGDF$S$Q5AGOE&amp;69NNRNdW$&amp;&amp;QMd&amp;W6$6NOd$E@XH@A6Q96OO&amp;69d65QOd 3SSXPUXDG$dZXHZ5#kWEEQR&amp;9OR5AEDABWG9$Q&amp;EA&amp;K9QEGk%kut}11=j[][]&gt;)|_&gt;-~^+^*/(/&lt;]lj7fCuz{siuCnCtuffJ111=JnYiicTf1j77===1==]]&gt;LYl&gt;l]c]J=7if}{C{CnFVh%%kk3VUUKPXyGoSA4dAO$AD5EREQR6WB#6M@NNRN6RRMHN6dZNS#W9E&amp;@@5N&amp;MZNQ$@E699 kkHhD$uEPGdEP$5DQZ9dR#R$M$OR9DQ9%B$$KM9$9$$9EQRODGwU}CC7T=jc&lt;&lt;=))r!_*+/~*&#34;*)++&lt;L[j==Jc}j1cT77c1=1Y=LLYY1=Y1Y=Lc=L=1}==iLY]Y=L7cj=}}nJntnVszzhoyk3XKSUK4ZX4wHFZD%$G9$R9OQQNRW&amp;$6@ZM#AW&amp;EDh@N&amp;M$5E$G&amp;G@@k@NAM5@e@&amp;d@@E6M GSZkDEX$EZO9KQD96dD99W3BQQN9@P&amp;dN#XN%@D&amp;QMdEW#EE@MEGSwPFhf1T=JLLY&lt;**^l!/*~,^;!_^|r&lt;+|l+r+&lt;+]&lt;&lt;[&lt;[&lt;l&lt;&lt;&lt;;=+f=jc}ci=Y=11Y77=c7c1Tit7Tfs{{zyUkUUUKFPe3ASKZGGAGFDz$S3dAQA9MQE&amp;B@6BE#@W@@3&amp;@dB$NN@REPB@X@@NU@N@9QE@WB6@N@6D@ xUX{EAwXEd$DH$6ER&amp;dNQQR9dEAB&amp;Q&amp;N#R$ZGRw#ANHMRRM$&amp;QSM95oHeVkxt7=]Y+&lt;/^|^^;&#34;.-,`:--.&#34;.&#34;&#39;^,&#34;&#39;^_;^_*//+|+/(&lt;l=[LY1j}Y1Y[JYTLc==71t}u}znuVzFF%XUX443keX54GZSAeGkdVEQeDQ$DR669@6@NNQ@WM6#N@@&amp;BM9$@ONM&amp;#E@@E59dW&amp;@G@ZE$#@5@@D {3SSFkGwUDDU9O3dEZ5R$6N5&amp;$FW6WMD9E6MSAODDR%EQdUNDEQD&amp;@kNEOZe3yfc7L&lt;+!/~;,^,.&#39; ^`^ ^,&#39;&#39;&#39;&#39;`,-^~;*!+)&lt;L&lt;/+Y&lt;jjlc7Yj]==Y71T77t}it}ChCsyVFhUXSkSeSk3XeKeAAS5A4GSHoZGSHD9dQ6QD9R@NN@6@@d9Qd@MBNB5@D&amp;k@EBSB@O6B&amp;Q@R@M&amp;@dES@G@ u3Sh%PDSPeKo9DSMA&amp;EGdEQO9dF&amp;R$9d$QRREE&amp;dRO9QE63BP6@X&amp;N$BAdH$$5SUtnY]|+_(,;^` -&#39;`^&#34;-`-&#39;-`&#34;&#39;,,;&#34;!!)&gt;[[_1|Yi[+==7}7Y1171fi}isnsfCzFFykkoUKkSSZSeeHZSAPAZSG5eXGGAzDDDdEQd9W&amp;MMBWF#E@$QMG#RR#9M$#@O#N@@W5@FRM56E#@Z6&amp;RM@$WR {e4h4O$yZHESAdZ&amp;H#EGE5$D5$S&amp;dR@XQRS&amp;9dE3ddNEW94&amp;@d@%$EeB@XEE$SDGZkz1T&lt;&gt;&lt;;*:~:&#34;&#34;:-&#34;,,&#39;.,.~&#34;;~*&#34;r&gt;rc:}|i&lt;Yj&gt;j==jzL77fJJnC{ouUFoyoXwXXUP%KZePGAGeSH%K3KeXKP5eZ$dSUWHRNENEGW@E&amp;@KM$Md#ERdWW5@W6@&amp;OZENEdM&amp;9dWNNdRMK@A@6SH@@ V3UAoeeKVEHHkEG&amp;S$eAE$QKO9HR$EBHAOEQOAO4DEWQR&amp;E9EWRUNd$M6DMEEQ5A$H5hu=T1(&lt;*;_&#34;(;!;!~~&#34;~,^!~+|&#34;L+[]&lt;[]&gt;c[L&lt;}7t}ftfuxysysoKowU3wSH44SkSPPGUA45ASAeKH5SZ%5%AeRODAXRRR6QE@EB@9@E@MQ$M@D9WdW#@$@M@N9OMA@dW@BNDQRD@O6WBE@E&amp;@ %VDK$hddhKHQ%EDDDd3DE$Ed$SRdDMEAEO5G5$5S9dW$AQQNA@wARQ$$R#D9dO$5E5DQ{EkffYl&lt;c*+)/+^|/)(/||+][)[LLY+=L7jji1nxszoCyzhhsU%w44UUSkSk43%eSHKAZHXeGHe45HASOX$O$e9EXEU9e&amp;EdDM9R#Q@P&amp;WRdRMBMB&amp;NO@W@QWB#&amp;A@W@@@@@NW99S&amp;3@N$GZ9B XeS3EOkQASH5X6KRE&amp;VEEEdD9QN@XNREEM65Ad3@9E66BOANM@WSNQW$966EN$EDEDRMkdOXkfVJ1iL1[)*j[[]]]Y=c=7Y=iiTfui}ftnzzkhhw4kSSPZPeHZXXZKhZHPeDXGXeeP45ZPGQ5GdEPEK$6Q6HGNkMEZ65W@KBB#E96RR#BBMMNQ@@@@@@6@@#@D9@@E@@WZ96N&amp;E@AHWoQB XDeK9E{AAdKASRzH$OE5RAEQ6MW6GH$Q$NZd$EEERE9#&amp;DM&amp;5MWhMEMEN$MQRE6OE$RE4d9O4kXosCuznTc111nT}JtJ7xfuVs{V{CFohFUkVVyh4SeXAPPSXPGPeKSFZ3%eZ3eGeZHXGZDK$ORDXOd$&amp;5OEG64MR$dO9DAMEEd&amp;&amp;&amp;&amp;RB&amp;@B#d&amp;6M@B@Q@@D@D&amp;9@&amp;6&amp;N@NBE6BR@eBMX@ sHXXSEyEHePPE9XH59&amp;M6HW9EOD@eEW@#MS&amp;DdQEQ96@W#@@R99DNN&amp;DMNN&amp;M$#EQE9N%OE5GdS$PhPoo%SoFhyh%kUkFVFkh34z4SkS4k%4S{KV4U4XXhwPS5HeXoeKZeKPyKePZGA5eEHNOE9RRP$d6EE9od5R5AHeAGEQo699QPBNB9W@#6BEBQ@@66#9#RER@#NBM6G@H#6E@HSW&amp;@ eUeZGEw4G5SSEHXGQAOSREGROOEQ@@E6@NG&amp;M$EEOQEdBW9W@6&amp;9NGB$M&amp;RN#HREEX9NPDDHG5DQO1EZsdZUzeP%PXUS%X3GxXXSFXwXXkUFPF3XXGZ4PeoG4GeKPS$Z3HGZAk$AAKED$5OEP&amp;G$RZO$$SED4Qz&amp;OHZEP&amp;Q5SRSQE5M$EWRNE$&amp;Md6#$NMWR@9E&amp;E@QWQQMR6AQ&amp;5E@&amp;@o $UO4GdRh55EeAREXDDWK#3&amp;E9$D$BN@NNW&amp;B9dAE5NM&amp;9R@@M@6Q@9QERN@6#MER6$OB5Q6XQE5$&amp;Gd6y$d$xGHUESZAUAKHF$5ZUGGSGDZSAASeXGSPeXOSDOEAXAU&amp;PEdZ&amp;SKDXNRGQ4M4E$9k9$5eN%$REDPPQOkESdGdP9&amp;NdNEEQE&amp;RK@56QEQWN@N@dBRE@@9@QQB@$M$RdB@GM&amp; GUKPFeGXDZ$&amp;E9A6ZHQRQ$@MU95NW9QEwSE$@6QMMEBWD6&amp;N@W@@N@@EBM@3BWd6MM6$BMWw9$59G&amp;UBSE&amp;&amp;HA5DOoE5eDAH%dQ9yDkEGSZ$GKOGoA4$UDdH3EXQQZX9HdRDZ6URz@QEEDdXE$dOAGdXDQGR$w5kEE5Zd5GOd5EREO&amp;w6EEdKWE$ED##&amp;MQN#@@9#N6@#@@WB&amp;#P@@EdOW @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#M6RE$E@@@@@@@@@@@@@#########@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BEEQR9&ampamp;Ed$$$$E&amp;W#@@@@BBMN&amp;REd$DENWBWM6&amp;9RRRQQR9&amp;&amp;&amp;9REE96W@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###B#@@@@@@#BNdDDDDDDDD$dEQR96NNQd$$DO5ZKSKeZHA5ODO55AHHHGZZZZZGGHA55AGeeH$RW@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@##B9$OOOOOOOOD9WBB####Bd$$DDO5ZSSSSSSSSSPPSSSSSSSSSSSSSSSSSSSSSSSSSSSKA&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@##B&amp;$OOOOOOOOOD&amp;BBBBBBBB6DOOOO55HSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSK56@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##NdO555555555O&amp;BBBBBBBBBEAAHGeKPSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSP56@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#B9DOOOOO555AGG9BBBBBBBBBBOKSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSXXXXXXXXX33SS33XXXXXX3SH@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#WEDDDDDDDOOOOD&amp;WWWWWWBBBBNOAZSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS3XXXXXXXXXX3SS3XXXXXXXX3PE@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Nd$$$$$$DDDDDDRWWWWWWWWWWW9O55GPSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSXXXXXXXXXXXX333XXXXXXXX3SHM@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;d$$$$$$$$$$$$QWWWWWWWWWWWWEOO55AKSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS3XXXXXXXXXXXXX33XXXXXXX3SSP$@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BRdddd$$$$$$$$$EMWWWWMNN6&amp;&amp;9R$DOOO55GPSSSSSSSSSSSS333333X4444XXXXXXXX33XXXXXXXXXXXXXXXXXXXXXXX33SSSQ@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@MREdddddddddddddddEEEEdddd$$$$$$DDDOOO55GPSSSSSS33XXX4U%kohFVyzzsCCCCszyyyVFokU4XXXXXXXXXXXXXXXXXXXX3SSKB@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@5@@@@@@@@@@@#WMNEEEEEEEEEEEEddddddEEEEEEEEEEEd$$DDDDOOO55AKSSSS34%kohFVyzCxnT17=jL[&lt;&gt;)r(]=fF3ZA5dR66&amp;96MMMM65P33XXXX3SSSSA@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@9Z@@@@@@@@@@@@@@@@@@@@@BM&amp;9EEEEEEEEQ9NMMMMMN69E$$$DDDOOOO55APSS3Xo{{u{xxfJ7Y][Y1}CVSO$@@@@@@@@@@@@@@@@@@@@@@@@@KSSSSSSSSSSSSQ@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#BWWM&amp;d$$$$DDDOOOO55ASS34s&gt;!jyXG$RW@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@PSSSSSSSSSSSZ$@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@W@@@@@@@@@####BBWWWWBBWWWWWWWBB#@@@@@@@@@@@@BM9d$$$$DDDDOOOO55PS3Xu&#39; G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ESSSSSSSSSSSPHE@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###BBBBWWMN&amp;MMMMMMMN6NMMMMMMMWWWWWWWWW@@BW&amp;Ed$$$$$$DDDOOO5AZSU} O@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@KSSSSSSSSSSSPAE@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BWWWWMN&amp;REEdERRQEEEEEEEEEEEEQQRR9&amp;&amp;66NM@@@WNEdd$$$$$$$DDDDOO5A%1 .#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ESSSSSSSSSSSSKOE@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N6&amp;RQEdd$$$$$dddd$$$$$$$$$$ddddddddEEEE6@@WM&amp;EEddd$$$$$$$DDDOAh7[~7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ESSSSSSSSSSSSSAOE@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@DOD#@Wdd$$$DDDOO$$$DDDDDDDDDDDD$$$$$$$$$$ddQ@@BWM6EEdddd$$$$$$dEE5ouCyO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@KSSSSSSSSSSSSSSe5D9@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@O5O$W@MDOOO5AHHOOOOOO55555OOOOOOODDDDD$$$$&amp;@@BWWMNRE9#@@@@@@@@@@#4kUX@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@9PSSSSSSSSSSSSSSSP5DE@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@QOOODM@6HePSSPZZeeKPPPPPKeeGGHA555OOODR@@@@@#BBWMB@@@@BM69996N@@@3SPAOR@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B5PSSSSSSSSSSSSSSSSSSA$d@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;DOO$M@NEHPSSSSSSSSSSSSSSSSSSPPKe$@@@@@@@@##BW@@@W$$$ddddEEEQ@@NHA555ODN@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@EKSSSSSSSSSSSSSSSSSSSSSZ$d6@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@W$ODD$EM##BM&amp;EHSSSSSSSSSSSSSK9@@@@@@@@@@##B@@@9DD$$$$$$ddddQ@@d5OOOOOOO$W@@@@@@@@@@@@@@@@@@@@@@MRdAKSSSSSSSeAHGZKPSSSSSSSSSSK$EN@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BM9QEEEEE9W@#WM&amp;EOGPXKE@@@@@@@@@@@@@@#@@@dOOODDDD$$$$$$dR@@DOOOODDDDDDdW@@@@@@@@@@@@WNRE$55HGZeKKSSSSSKH55555AGGGGZeeeeKKDRW@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##BWN&amp;9QEEEQ6W@#@@@@@@@@@@@@@@@@@@@GGA55OOOODDD$$$$$6@BODDDDDDD$$$$$9@@BM&amp;Qd$DDDDOOOOOOO55555AAHHA5OOOOOOOO555555555QMB@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@WNB@@@@@@@@@@@@@@@@@NS3SSPZA55OOODDD$$$$@@QDDD$$$$$$$ddddd$$$$$$$$$$$DDDDDDDOOOOOOOOO5DDDDDDOOOOOOOOOODNB@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Xyh%43SKA55OOODDDD$$$$@@$$$$$dddEEEEEEdddddddd$$$$$$$$$$$DDDDDDDDOOD$$$DDDDDDDDDDDDdW@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@1]7nV4SSH55OOODDDDDDDD$d@@dEER&amp;&amp;&amp;9RQQEEEEEEEEEEddddddd$$$$$$$$$$$$$D$$$$$$$$$$$$$$$$R@@@@@#### @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###@@@@@@MMMMMMMMMMMMN66&amp;&amp;RRQEEEEEEEEddddddd$$$$$$$$$$$$$$$$$$$$$$M@@@@##### @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###BBBBBBBBBBBBBB###@@@@BWWWWWWWWWWWWMMMMMMMMMNN6&amp;9RREEEEEEEdddddddddddEQRR9&amp;6NNM#@@@@BBBBBB @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@########BBBBWWWWWWWWWWWWWWWWWWWWWWMMMMMMNN6&amp;9RREEEEEER&ampamp;QdDOHZePSSSSSSSSSSPZH5dQ&amp;W@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@####@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@MN66&amp;&amp;9RRREEEEEE #############@@@@@@@@@@@@@@@@@@@@@@@@99@@EDOAAGZePSSSSSSSSSSSSSSSSSSSSSSSSPKZZAO$EER&amp;NMB@@@@@@@@@@@#########@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;EEEEEEEEEEEEEEEEEE ############BB#@@@@@@@@@@@@@@@@@@@@M$$$$EQQQE$$$DOOAHZKPSSSSSSPKKKeeZGGHA55OOOOODDDD$$$$$$d@@@@######@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@WEEEEEEEEEEEEEEEdddddd ##BBBBBBBBBBBBBBB@@@@@@@@@@@@@@@@@@N$$$$$$$$E9NN69QE$$DDOOA5555OOOOdN@@@@@@##BBWWMEddddEEEER@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@9EEEEEdddddddddddddddddd BBBBBBBBBBBBBBBBBBBB@@@@@@@@@@@@@@@@N$DD$$$$$RWBBBBB#@@#W&amp;REd$$$$$$@@WWWWWWWBBBB##@@9&amp;6NMMWWWB#@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@MEddddddddddddddddddddddddd BBBBBBBBBBBBBBBBBBBBBB#@@@@@@@@@@@@@@@6$D$$$EWBBBBBWBB#@@@@@@@@@@@@@@#BBWWWWWWWWWW@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Rdddddddddddddddddddddddddddd BBBBBBBBBBBBBBBBBBBBBBBBWB@@@@@@@@@@@@@@N$$$MWWWWWWWWWWWWWWWWWWWWWW#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;Edddddddddddddddddddddddddd$$$$$ BBBBBBBBBBBBBBBBWWWWWWWWWWWWWB@@@@@@@@@@@@WNWWWWWWWWWWWWWWWWWWWWWWW#@@@@@@@@@@@@@@@@WMMMMWWWBB#####@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NEdddddddddddddddddddd$$$$$$$$$$$$$$$ BBBBBBBWWWWWWWWWWWWWWWWWWWWWWWWWWW@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@WWWWWWB#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@W&amp;Eddddddddddddddd$$$$$$$$$$$$$$$$$$$$$$$$ WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWB#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NEddddddddddddddd$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWMMMMMW@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BM69Eddddddddddd$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMM6&amp;9RQQQRR966WBBBN9QEEEEERM@@@@@@@@@@@@@@6EdddddEQQREddddddddddddddddd$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ WWWWWWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMN&amp;9RQEEEEEEEEEEEEEEEEEEEEEEEEdddddddddddddddddddddddddddddddddddddddd$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://boply.github.io/fastpages/jupyter/week-6/2022/09/27/Image-Arrays.html",
            "relUrl": "/jupyter/week-6/2022/09/27/Image-Arrays.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Fibonacci with Class",
            "content": "Constants . x1: first number in sequence | x2: second number in sequence | x3: sum on x1 and x2 | n: amount of numbers in sequence | i: count | . For Loop . Loops sequence (fibonacci math) FOR as long as the max number is greater than or equal to the count (i). | . // For Loop public class fibo { public static void main(String[] args) { // n = the number of numbers in sequence int n = 25; int x1 = 0; int x2 = 1; System.out.print(n+ &quot; numbers in sequence: n&quot;); for (int i = 1; i &lt;= n; ++i) { System.out.print(x1 + &quot; &quot;); // x1 = first number, x2 = second number, x3 is the sum of 1 and two. int x3 = x1 + x2; x1 = x2; x2 = x3; } } } fibo.main(null); . 25 numbers in sequence: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 . While Loop . Loops sequence (fibonacci math) WHILE the max number is greater than or equal to the count (i). | . // While Loop class fibo { public static void main(String[] args) { try { int x1 = 0, x2 = 1, n = 25; System.out.print(n+ &quot; numbers in sequence: n&quot;); int i = 0; while (i &lt; n) { System.out.print(x1 + &quot; &quot;); int x3 = x2 + x1; x1 = x2; x2 = x3; i = i + 1; } } catch (Exception e) { System.out.println(&quot;Input must be an integer &quot; + e); } } } fibo.main(null) . 25 numbers in sequence: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 . Input . Uses a while loop for takes in the users INPUT instead of a pre-registered max number. | . // Input class fibo { public static void main(String[] args) { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Type in amount of numbers for sequence --&gt; &quot;); try { int n = input.nextInt(); int x1 = 0, x2 = 1; System.out.print(n + &quot; n&quot;); int i = 0; while (i &lt; n) { System.out.print(x1 + &quot; &quot;); int x3 = x2 + x1; x1 = x2; x2 = x3; i = i + 1; } } catch (Exception e) { System.out.println(&quot;Input must be an integer &quot; + e); } } } fibo.main(null) . Type in amount of numbers for sequence --&gt; 25 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 . Recursion . Recalls itself (RECURSES) (fibonacci math) for as long as the max number is greater than the count (i). | . // Recursion public class fibo{ public static int fibonacciRecursion(int x){ if(x == 0){ return 0; } if(x == 1 || x == 2){ return 1; } return fibonacciRecursion(x-2) + fibonacciRecursion(x-1); } public static void main(String args[]) { int n = 25; System.out.print(n + &quot; numbers in sequence: n&quot;); for(int i = 0; i &lt; n; i++){ System.out.print(fibonacciRecursion(i) + &quot; &quot;); } } } fibo.main(null) . 25 numbers in sequence: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 . Summary . Run Times . For Loop: 0.1 seconds | While Loop: 0.1 seconds | Input: 0.1 seconds disregarding user | Recursion: 0.1 seconds | . Difference between For Loop and While Loop . A For Loop will loop for an already predetermined amount of times. | A While Loop will continue to loop until a condition is no longer met. | . Using Extends . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . While Loop Extends . public class FiboWhile extends Fibo { public FiboWhile() { this(10); // telescope to avoid code duplication, using default } public FiboWhile(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboWhile wFib = new FiboWhile(); wFib.print(); } // Custom init using while loop instead protected void init() { this.name = &quot;While Loop&quot;; int i = 0; // new long array with only 0 long[] f = new long[] {0,1}; //while i is less than the length desired while (i &lt; this.size) { // sets data first, then adds to f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; // adds to counter i++; } } } FiboWhile.main(null) . Init method = While Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Recursion Extends . public class FiboRecur extends Fibo { public FiboRecur() { this(10); // telescope to avoid code duplication, using default } public FiboRecur(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboRecur rFib = new FiboRecur(); rFib.print(); } // Recursion function, using int i as a counter protected void recur(long[] f, int i) { // Sets data using beginning value this.setData(f[0]); // Cretes new long f = new long[]{f[1], f[0] + f[1]}; // Adds to counter i++; if (i &lt; this.size) { // Recusion continues if size limit has not been reached this.recur(f, i); } } // Custom init using recursion loop instead protected void init() { this.name = &quot;Recursion&quot;; // Uses int i as a counter for recusion, also creates initial long[] int i = 0; long[] f = new long[] {0,1}; // input long and counter i into recursion function this.recur(f, i); } } FiboRecur.main(null) . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . For Loop Extends . public class FiboFor extends Fibo { public FiboFor() { this(10); // telescope to avoid code duplication, using default } public FiboFor(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboRecur rFib = new FiboRecur(); rFib.print(); } // Custom init using for loop instead protected void init() { this.name = &quot;For loop&quot;; // creates initial long[] long[] f = new long[] {0,1}; // iterates through until reaches desired length for (int i = 0; i &lt; this.size; i++) { // sets data, then updates f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; } } } FiboFor.main(null) . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] .",
            "url": "https://boply.github.io/fastpages/jupyter/week-5/2022/09/23/Fibonacci-With-Class.html",
            "relUrl": "/jupyter/week-5/2022/09/23/Fibonacci-With-Class.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Java Arrays",
            "content": "Teddy Bear Loop . Loops through a loop using an array of teddy bears of different designs until there&#39;s no more left in the store. | . import java.util.Random; class TeddyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] teddys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of teddys */ public TeddyLoop() { //Storing Data in 2D arrays teddys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Teddy 0 { &quot; ___&quot;, &quot; {~._.~}&quot;, &quot; ( Y )&quot;, &quot; ()~*~()&quot;, &quot; (_)-(_)&quot; }, //Teddy 1 { &quot; ()=()&quot;, //[1][0] &quot; (&#39;Y&#39;)&quot;, &quot; q . p&quot;, &quot; ()_() &quot; }, //Teddy 2 { &quot; ()=()&quot;, //[2][0] &quot; (&#39;:&#39;)&quot;, &quot; d . b&quot;, &quot; ()_() &quot; }, //Teddy 3 { &quot; ()-()&quot;, //[3][0] &quot; (^;^)&quot;, &quot; C C &quot;, &quot; ()_() &quot; }, //Teddy 4 { &quot; ()-()&quot;, //[4][0] &quot; (&#39;&amp;&#39;)&quot;, //[4][1] &quot; c . c&quot;, //[4][2] &quot; ()_()&quot; //[4][3] }, }; } /** * Loop and print teddys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;5 distraught Teddy Bears in a Store. nHow many bought? How many more?&quot;); // Random starter array String[] arr={&quot;Don&#39;t worry! &quot;, &quot;Still &quot;, &quot;We have &quot;, &quot;Come quick! &quot;, &quot;Hurry! &quot;, &quot;Just &quot;, &quot;Only &quot;}; // teddys (non-primitive) defined in constructor knows its length int teddyCount = teddys.length; for (int i = teddyCount; i &gt;= 1; i--) //loops through 2D array length backwards { // Random Word Random r=new Random(); int randomWord=r.nextInt(arr.length); //this print statement shows current count of teddys if(i == 1) {// concatenation (+) of the loop variable and string to form a countdown message System.out.println(&quot;Oh no! &quot; + i + &quot; Teddy Bear in the store! n&quot;); } else if(i == 5) { System.out.println(&quot;New shipment! &quot; + i + &quot; Teddy Bears in the store! n&quot;); } else { System.out.println(arr[randomWord] + i + &quot; Teddy Bears in the store! n&quot;); } //how many separate parts are there in a teddy teddy? for (int col = 0; col &lt; teddys[col].length; col++) { for (int row = 0; row &lt; teddyCount; row++) { System.out.print(teddys[row][col]); System.out.print(&quot; t&quot;); } System.out.println(); } System.out.println(); //countdown for poem, decrementing teddyCount variable by 1 teddyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;All the teddy bears out the door. :(&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new TeddyLoop().printPoem(); //a new teddy list and output in one step } } TeddyLoop.main(null); . 5 distraught Teddy Bears in a Store. How many bought? How many more? New shipment! 5 Teddy Bears in the store! ___ ()=() ()=() ()-() ()-() {~._.~} (&#39;Y&#39;) (&#39;:&#39;) (^;^) (&#39;&amp;&#39;) ( Y ) q . p d . b C C c . c ()~*~() ()_() ()_() ()_() ()_() Just 4 Teddy Bears in the store! ___ ()=() ()=() ()-() {~._.~} (&#39;Y&#39;) (&#39;:&#39;) (^;^) ( Y ) q . p d . b C C ()~*~() ()_() ()_() ()_() Hurry! 3 Teddy Bears in the store! ___ ()=() ()=() {~._.~} (&#39;Y&#39;) (&#39;:&#39;) ( Y ) q . p d . b ()~*~() ()_() ()_() Come quick! 2 Teddy Bears in the store! ___ ()=() {~._.~} (&#39;Y&#39;) ( Y ) q . p ()~*~() ()_() Oh no! 1 Teddy Bear in the store! ___ {~._.~} ( Y ) ()~*~() All the teddy bears out the door. :( - THE END .",
            "url": "https://boply.github.io/fastpages/jupyter/week-4/2022/09/19/Java-Arrays.html",
            "relUrl": "/jupyter/week-4/2022/09/19/Java-Arrays.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "FRQ 2020 - Methods and Control Structures",
            "content": "Allotted time: 15 minutes (plus 5 minutes to submit) This question involves the use of check digits, which can be used to help detect if an error has occurred when a number is entered or transmitted electronically. The CheckDigit class is shown below. You will write one method of the CheckDigit class. . public class CheckDigit { /** Returns the check digit for num * Precondition: The number of digits in num is between one and six, inclusive. * num &gt;= 0 */ public static int getCheck(int num) { /* implementation not shown */ } /** Returns true if numWithCheckDigit is valid, or false otherwise, * as described in part (a) * * Precondition: The number of digits in numWithCheckDigit is * between two and seven, inclusive. * numWithCheckDigit &gt;= 0 */ public static boolean isValid(int numWithCheckDigit) { /* to be implemented in part (a) */ } // There may be variables and methods not shown. } . (a) Write the isValid method. The method returns true if its parameter numWithCheckDigit, which represents a number containing a check digit, is valid, and false otherwise. The check digit is always the rightmost digit of numWithCheckDigit. The following table shows some examples of the use of isValid. . Method Call Return Value Explanation . getCheck(159) | 2 | The check digit for 159 is 2. | . isValid(1592) | True | The number 1592 is a valid combination of a number (159) check digit (2). | . isValid(1593) | False | The number 1593 is not a valid combination of a number (159) check digit (3) because 2 is the check digit for 159. | . Complete method isValid below. You must use getCheck appropriately to receive full credit. . /** Returns true if numWithCheckDigit is valid, or false * otherwise, as described in part (a) * Precondition: The number of digits in numWithCheckDigit is * between two and seven, inclusive. * numWithCheckDigit &gt;= 0 */ public static boolean isValid(int numWithCheckDigit) . Part A Answer: . public static boolean isValid(int numWithCheckDigit) { // Takes the remainder of dividing by 10 to get the last digit. int lastDigit = numWithCheckDigit % 10; // Divides by 10 to get all the digits in front of the last one. int num = numWithCheckDigit / 10; // Checks if get check returns the same value as the last digit. if(getCheck(num) == lastDigit) { return true; } else { return false; } } . (b) A programmer wants to modify the CheckDigit class to keep track of how many times a call to isValid is made with an incorrect check digit. Any time a call to isValid is made with an incorrect check digit, the count should be increased by one. The programmer would like to implement this change without making any changes to the signature of the isValid method or overloading isValid. Write a description of how you would change the CheckDigit class in order to support this modification. Do not write the program code for this change. Make sure to include the following in your response. . Identify any new or modified variables or methods. | Describe, for each new or revised variable or method, how it would change or be implemented, including visibility and type. | . Part B Answer: . To count how many times the isValid method returns false, a new integer counter field would need to be created for the checkDigit class. Every time, either in the else statement, in the isValid method, or whenever the isValid method returns false within another class or method, this field should be increased by 1. If this field will be accessed within another class, it should be a public field rather than a private field. | .",
            "url": "https://boply.github.io/fastpages/jupyter/week-4/2022/09/16/FRQ-2020.html",
            "relUrl": "/jupyter/week-4/2022/09/16/FRQ-2020.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "If and Expressions",
            "content": "If Statement . Runs a specific set of code if a condition is met. . This conditions can be anything but it primarily composed of variables such as: Booleans | Integers | Floats | Etc... | . | . | . if(condition) { examplecode(); } . If/Else Statement . Runs a specific set of code if a condition is met. OTHERWISE if the condition is not met then it runs a separate set of code. . This conditions can be anything but it primarily composed of variables such as: Booleans | Integers | Floats | Etc... | . | . | . if(condition) { runprimarycodehere(); }else{ runsecondarycodehere(); } . If/Else Example . This is an if statement testing if the variable is below 0. If it is below 0 then it prints a message stating it&#39;s negative. If it&#39;s not above 0 then it prints a message stating it&#39;s positive. | . import java.util.Scanner; Scanner scanner = new Scanner(System.in); int number; System.out.print(&quot;Enter a number: &quot;); // Get input number = scanner.nextInt(); System.out.println(number); // Check if number is less than 0 if(number &lt; 0) { System.out.println(number + &quot; is negative&quot;); }else{ System.out.println(number + &quot; is positive&quot;); } . Enter a number: 15 15 is positive . If-elseIf-else Statement . Runs an if statement for a condition. If the condition is met then a set of code is run. If the condition is not met then a separate if statement is run. If that condition is met then a set of code is ran but if not then the else code is run. . | In this example, we made the positive negative calculator more specific. It now tests if the number is 0 first. If it is then it states that it&#39;s not negative or positive. While if it&#39;s not then it tests if the number is greater than 0 in which case it&#39;s positive. If not then it&#39;s negative. . | . import java.util.Scanner; Scanner scanner = new Scanner(System.in); int number; System.out.print(&quot;Enter a number: &quot;); number = scanner.nextInt(); System.out.println(number); //Check if number equals 0 if(number == 0) { System.out.println(number + &quot; is not negative or positive&quot;); //If it doesn&#39;t then check if number is greater than 0. }else if (number &gt; 0) { System.out.println(number + &quot; is positive&quot;); } else { System.out.println(number + &quot; is negative&quot;); } . Enter a number: -25 -25 is negative . If/Else example with 5 or more Conditions . This is an example of a calculator that identifies if the number is positive or negative and if&#39;s it greater than or less than 100 relative to signs. | . import java.util.Scanner; Scanner scanner = new Scanner(System.in); int number; System.out.print(&quot;Enter a number: &quot;); try { // Get input number = scanner.nextInt(); System.out.println(number); // Check if number is equal to zero if(number == 0) { System.out.println(number + &quot; is 0&quot;); // If it&#39;s not then check if number is greater than 0 }else if (number &gt; 0) { if(number &gt; 100) { System.out.println(number + &quot; is positive and greater than 100&quot;); } else { System.out.println(number + &quot; is positive and less than 100&quot;); } } // If number is less than 0... else if (number &lt; 0) { if(number &gt; -100) { System.out.println(number + &quot; is negative and greater than -100&quot;); } else { System.out.println(number + &quot; is negative and less than -100&quot;); } } } catch (Exception e) { System.out.println(&quot;Input must be an integer&quot;); } . Enter a number: -250 -250 is negative and less than -100 . Switch-case Example . In this example, we see how instead of using if statements, we use cases from inputs. We input a message and then select a number corresponding to a color. This final output then prints your message in your chosen color. | . import java.util.Scanner; Scanner scanner = new Scanner(System.in); int number; String message; //Setup of COLOR variables public static final String RED = &quot; u001B[31m&quot;; public static final String GREEN = &quot; u001B[32m&quot;; public static final String YELLOW = &quot; u001B[33m&quot;; public static final String BLUE = &quot; u001B[34m&quot;; public static final String PURPLE = &quot; u001B[35m&quot;; public static final String CYAN = &quot; u001B[36m&quot;; public static final String WHITE = &quot; u001B[37m&quot;; // Message Input System.out.print(&quot;Enter a message: &quot;); message = scanner.nextLine(); System.out.print(message + &quot; n n&quot;); // Menu for custom color. System.out.print(RED + &quot;0 - Red n&quot;); System.out.print(GREEN + &quot;1 - Green n&quot;); System.out.print(YELLOW + &quot;2 - Yellow n&quot;); System.out.print(BLUE + &quot;3 - Blue n&quot;); System.out.print(PURPLE + &quot;4 - Purple n&quot;); System.out.print(CYAN + &quot;5 - Cyan n&quot;); System.out.print(WHITE + &quot;6 - White n n&quot;); System.out.print(&quot;Enter a number: &quot;); number = scanner.nextInt(); System.out.print(number + &quot; n n&quot;); // Switch-case related to the chosen number. switch(number) { case 0: System.out.println(RED + message); break; case 1: System.out.println(GREEN + message); break; case 2: System.out.println(YELLOW + message); break; case 3: System.out.println(BLUE + message); break; case 4: System.out.println(PURPLE + message); break; case 5: System.out.println(CYAN + message); break; case 6: System.out.println(WHITE + message); break; } . Enter a message: This is a message 0 - Red 1 - Green 2 - Yellow 3 - Blue 4 - Purple 5 - Cyan 6 - White Enter a number: 4 This is a message . De Morgan&#39;s Law . Not (a and b) is the same as (not a) or (not b). In Java this is written as !(a &amp;&amp; b) == !a || !b | Not (a or b) is the same as (not a) and (not b). In Java this is written as !(a || b) == !a &amp;&amp; !b | Or in other words it uses &quot;nots&quot; that are equivalent to other &quot;not&quot; equations. | . int x = 10; int y = 4; if(!(x &lt; 3) || !(y &gt; 2) == !(x &lt; 3 &amp;&amp; y &gt; 2)) { System.out.print(&quot;True&quot;); }else { System.out.print(&quot;False&quot;); } . True .",
            "url": "https://boply.github.io/fastpages/jupyter/week-3/2022/09/10/if-expressions.html",
            "relUrl": "/jupyter/week-3/2022/09/10/if-expressions.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Code.org Key Learning",
            "content": "Code.org Key Learning . PainterPlus allows for custom actions and an advanced painter. For example, turnRight instead of three turnLeft’s. | . . While loops allow code to repeat until a condition is no longer met. | . . Methods allow a creation of custom commands or actions. For example, running and painting in a line. | . . Debug with prints about information. | . . Extends . Sub-class extends to Super-class. . Super-class Painter | Parent-class | . | Sub-class PainterPlus | Child-Class | . | . Objects . Objects are the myPainter and myPainterPlus references that inherit from the Painter class. | Painter is a template class that allows the object to use and create methods which display actions. | . Instantiate with: “ClassName objectName = new ClassName();” Or: “Painter myPainter = new Painter();” . .",
            "url": "https://boply.github.io/fastpages/markdown/week-2/2022/09/03/Code-Learning.html",
            "relUrl": "/markdown/week-2/2022/09/03/Code-Learning.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Object Notebook",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Introduction&quot;); System.out.println(&quot;2 - Celsius to Fahrenheit&quot;); System.out.println(&quot;3 - Fibonacci Sequence&quot;); System.out.println(&quot;4 - Even-Odd Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Exiting...&quot;); quit = true; break; case 1: System.out.print(&quot;Hey, it&#39;s Braeden!&quot;); break; case 2: Scanner input; double Faren = 0.0; double Cels = 0.0; String FinalOutput; boolean correctDouble; input = new Scanner(System.in); System.out.print(&quot;Enter a temperature in Celsius: &quot;); try { Cels = input.nextDouble(); System.out.println(Cels); correctDouble = true; } catch (Exception e) { correctDouble = false; } input.close(); Faren = ((Cels * 9) / 5) + 32; FinalOutput = Cels + &quot; degrees celsius is equal to &quot; + Faren + &quot; degrees farenheit&quot;; System.out.println( Cels + &quot; degrees celsius is equal to &quot; + Faren + &quot; degrees farenheit&quot;); // for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array // System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: Scanner inputTwo; inputTwo = new Scanner(System.in); System.out.print(&quot;Type in amount of numbers for sequence --&gt; &quot;); try { int N = inputTwo.nextInt(); int x1 = 0, x2 = 1; int count = 0; while (count &lt; N) { System.out.print(x1 + &quot; &quot;); int x3 = x2 + x1; x1 = x2; x2 = x3; count = count + 1; } } catch (Exception e) { System.out.println(&quot;Input must be an integer &quot; + e); } break; case 4: Scanner inputThree = new Scanner(System.in); int num; //Declare a variable System.out.println(&quot;Enter a number:&quot;); num = inputThree.nextInt(); //If number is divisible by 2 then it&#39;s an even number //else odd number if ( num % 2 == 0 ) System.out.println( num + &quot; is even!&quot;); else System.out.println( num + &quot; is odd!&quot;); // System.out.print(&quot;Loading...&quot;); // for (int i = 0; i &lt; 20; i++) { // fixed length loading bar // int random = (int) (Math.random() * COLORS.length); // random logic // try { // Thread.sleep(100); // delay for loading // } catch (Exception e) { // System.out.println(e); // } // System.out.print(COLORS[random][ANSI] + &quot;#&quot;); // } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Introduction 2 - Celsius to Fahrenheit 3 - Fibonacci Sequence 4 - Even-Odd Calculator 0 - Quit - 1: Hey, it&#39;s Braeden! 2: Enter a temperature in Celsius: 27.0 27.0 degrees celsius is equal to 80.6 degrees farenheit 3: Type in amount of numbers for sequence --&gt; 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 4: Enter a number: 12398 is even! 0: Exiting... .",
            "url": "https://boply.github.io/fastpages/jupyter/week-2/2022/09/01/Object-Notebook.html",
            "relUrl": "/jupyter/week-2/2022/09/01/Object-Notebook.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Week 2",
            "content": "Objects . Scanner class to get inputs | Variables set to output. | Print menu for understanding. | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 1: Hello, World! 3: Loading...#################### 2: DefaultRedGreenYellowBluePurpleCyanWhite 0: Goodbye, World! .",
            "url": "https://boply.github.io/fastpages/jupyter/week-2/2022/08/30/Week-2.html",
            "relUrl": "/jupyter/week-2/2022/08/30/Week-2.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Template Notebook 1",
            "content": "Heading 1 . Example notes Sub Notes | . | . Heading 2 . Example notes Sub Notes | . | . public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://boply.github.io/fastpages/jupyter/2022/08/28/Template-Notebook-1.html",
            "relUrl": "/jupyter/2022/08/28/Template-Notebook-1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Program Info",
            "content": "echo &quot;Python Version&quot; python --version python2 --version echo &quot;&quot; echo &quot;-Java Version-&quot; java --version javac --version echo &quot;&quot; echo &quot;--Anaconda Version--&quot; conda --version conda list | grep &quot;jupyter&quot; . Python Version Python 3.9.12 Python 2.7.18 -Java Version- java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) javac 18.0.2.1 --Anaconda Version-- conda 4.14.0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . echo &quot;-Jupyter Version-&quot; jupyter --version jupyter kernelspec list echo &quot;&quot; echo &quot;npm Version&quot; npm -version . -Jupyter Version- Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/boply/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0b3b7c4b39c51acaa0ababaac78dafb28c940c1acd38600e6898f44bc93745552 /Users/boply/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0b3b7c4b39c51acaa0ababaac78dafb28c940c1acd38600e6898f44bc93745552 bash /Users/boply/Library/Jupyter/kernels/bash java /Users/boply/Library/Jupyter/kernels/java javascript /Users/boply/Library/Jupyter/kernels/javascript python3 /Users/boply/opt/anaconda3/share/jupyter/kernels/python3 npm Version 6.4.1 .",
            "url": "https://boply.github.io/fastpages/jupyter/week-1/2022/08/28/Program-Info.html",
            "relUrl": "/jupyter/week-1/2022/08/28/Program-Info.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Fibonacci Sequence",
            "content": "class Fibo { public static void main(String[] args) { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Type in amount of numbers for sequence --&gt; &quot;); try { int N = input.nextInt(); int x1 = 0, x2 = 1; int count = 0; while (count &lt; N) { System.out.print(x1 + &quot; &quot;); int x3 = x2 + x1; x1 = x2; x2 = x3; count = count + 1; } } catch (Exception e) { System.out.println(&quot;Input must be an integer &quot; + e); } } } Fibo.main(null) . Type in amount of numbers for sequence --&gt; 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 .",
            "url": "https://boply.github.io/fastpages/jupyter/week-1/2022/08/28/Fibonacci-Sequence.html",
            "relUrl": "/jupyter/week-1/2022/08/28/Fibonacci-Sequence.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Week 1 Primitives",
            "content": "*Links to all fastpages blogs. . Tigran A. (Partner) . Aarav A. . Vunsh M. . Primitive Data Types . Booleans | Numerics (integers, bytes, ect.) | . Non-Primitive Data Types . Strings | Arrays | . College Board and PBL . Each student captures information in fastpages thinking … how they are going to capture information that will grow to 10 college board units … how they will recognize something as PBL vs College Board. . I will watch video from College Board. | I will practice fastpages whenever I have the time. | I will keep key info and code in Jupyter Notebooks. Notes Template |",
            "url": "https://boply.github.io/fastpages/markdown/week-1/2022/08/26/Week-1.html",
            "relUrl": "/markdown/week-1/2022/08/26/Week-1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "TT 1.0.0 Tools and Equipment",
            "content": "Hacks . Issue . Part 1 Fastpages . Python Jupyter Notebook | Java Jupyter Notebook | | Github Insights for FastPages | Github Insights for CSA Project | . Part 2 Java Project . . [Spring Portfolio Commit]https://github.com/boply/portfolio/commit/ed9843a440a47ddac64472344b9c368fe6485ef5) | . Issue .",
            "url": "https://boply.github.io/fastpages/markdown/2022/08/22/tools.html",
            "relUrl": "/markdown/2022/08/22/tools.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello World!&quot;) . Hello World! .",
            "url": "https://boply.github.io/fastpages/jupyter/week-0/2022/08/22/PythonNotebook.html",
            "relUrl": "/jupyter/week-0/2022/08/22/PythonNotebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Java Notebook",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://boply.github.io/fastpages/jupyter/week-0/2022/08/22/JavaNotebook.html",
            "relUrl": "/jupyter/week-0/2022/08/22/JavaNotebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://boply.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post32": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://boply.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About",
          "content": "This website is powered by fastpages 1 &amp; Braeden Copley 2. . Focus and Habits . I’m interested in learning a wide variety of skills which is also why I’m taking this APCSA. | I plan on educating myself more on all my classes so I can not only get better grades but also learn more. | I’ll make sure to manage my mental health and avoid the common trap that students find themselves in. . | Interests and Skills Video Games | Gym | Computers | APCSA Fastpages | AWS | Juypter Notebooks | Instantiating an Object | Java Classes | Java Objects | Bash Commands | If Expressions | While/For loops | Markdown | Arrays | ASCII Text | Answering Methods and Control Structures FRQs | Working with a team using Slack, Github and Discord. | Array Lists | Image Arrays with ASCII | AP Exam and Collegeboard expectations. | MCQ Tests and reflections | Fetching | Backend with databases | API’s | CSS styling and connecting frontend backend to projects. | . | . | . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . | he/him, BRAY-DEN &#8617; . |",
          "url": "https://boply.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Quiz",
          "content": "How many bones are in the human body? . 96 | 193 | 206 | 309 | . | How many states are there in America? . 48 | 50 | 52 | 60 | . | What year did World War II end? . 1896 | 1918 | 1942 | 1945 | . | . Check Your score is -/3 .",
          "url": "https://boply.github.io/fastpages/quiz.html",
          "relUrl": "/quiz.html",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://boply.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}